!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M12,19V5'/%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M5,12l7-7l7,7'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M12,5v14'/%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M19,12l-7,7l-7-7'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M19,12H5'/%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M12,19l-7-7l7-7'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M5,12h14'/%3e %3cpath style='fill:none;stroke:%2352ff80;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M12,5l7,7l-7,7'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M4.99,13.91 c-1.46-0.68-2.38-1.56-2.61-2.48C2.14,10.52,2.59,9.59,3.65,8.8c1.07-0.79,2.7-1.39,4.65-1.74c1.95-0.33,4.12-0.38,6.16-0.14 c2.05,0.25,3.87,0.78,5.2,1.52c1.32,0.73,2.08,1.63,2.15,2.56c0.07,0.93-0.56,1.84-1.77,2.58c-1.22,0.75-2.96,1.3-4.97,1.57 L8.58,16.1L12,17.45L8.58,16.1l3.84-2.63'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M11.68,13.46l3.77,2.72 l-4.09,1.49l4.09-1.49l-6.47-1.12c-2.01-0.32-3.73-0.91-4.93-1.69c-1.2-0.78-1.8-1.7-1.71-2.63c0.09-0.92,0.87-1.8,2.21-2.5 s3.18-1.18,5.23-1.39c2.05-0.19,4.22-0.09,6.16,0.29c1.94,0.39,3.56,1.04,4.61,1.85s1.47,1.76,1.21,2.67 c-0.26,0.91-1.2,1.77-2.67,2.41'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M7.8,9.06 c0.38-2.11,1.08-3.97,1.99-5.3c0.91-1.33,1.98-2.06,3.05-2.09c1.07-0.02,2.08,0.67,2.88,1.96c0.8,1.3,1.35,3.13,1.56,5.22 c0.21,2.09,0.08,4.33-0.39,6.39c-0.46,2.05-1.23,3.8-2.18,4.99c-0.95,1.18-2.04,1.74-3.1,1.58c-1.06-0.16-2.03-1.02-2.77-2.45 l-2.49-4.52l0.03,3.75l-0.03-3.75l4.25,3.51'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M9.89,12.12L7.17,14.9 L6.23,9.02l0.94,5.88l1.41-6.41c0.41-1.99,1.08-3.69,1.91-4.85c0.83-1.16,1.78-1.72,2.7-1.59c0.92,0.13,1.76,0.95,2.4,2.32 c0.64,1.37,1.04,3.23,1.15,5.29c0.1,2.06-0.1,4.22-0.57,6.14c-0.48,1.92-1.2,3.51-2.06,4.52c-0.86,1.01-1.82,1.39-2.72,1.09 s-1.71-1.28-2.29-2.78'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M1,4v6h6'/%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M3.51,15 c0.65,1.84,1.88,3.42,3.5,4.5s3.56,1.61,5.5,1.49c1.95-0.11,3.81-0.85,5.3-2.11c1.49-1.26,2.53-2.97,2.96-4.87 c0.43-1.9,0.24-3.89-0.56-5.68c-0.8-1.78-2.15-3.25-3.86-4.2c-1.71-0.94-3.68-1.31-5.61-1.04c-1.93,0.27-3.72,1.16-5.1,2.54L1,10'/%3e %3c/svg%3e"},function(e,t){e.exports="data:image/svg+xml,%3c!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3e %3csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 24 24' style='enable-background:new 0 0 24 24;' xml:space='preserve'%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M23,4v6h-6'/%3e %3cpath style='fill:none;stroke:%2300ff44;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;' d='M20.49,15 c-0.65,1.84-1.88,3.42-3.51,4.5c-1.63,1.08-3.56,1.6-5.51,1.49c-1.95-0.11-3.81-0.86-5.29-2.12c-1.49-1.26-2.53-2.97-2.96-4.88 c-0.43-1.9-0.23-3.89,0.57-5.68c0.8-1.78,2.16-3.25,3.86-4.19c1.71-0.94,3.68-1.3,5.61-1.03c1.93,0.27,3.72,1.17,5.1,2.55L23,10'/%3e %3c/svg%3e"},function(e,t,n){"use strict";n.r(t);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function s(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var i,o,s=n.call(e),r=[];try{for(;(void 0===t||t-- >0)&&!(i=s.next()).done;)r.push(i.value)}catch(e){o={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(o)throw o.error}}return r}function r(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(s(arguments[t]));return e}var a=function(e,t){this.target=t,this.type=e},c=function(e){function t(t,n){var i=e.call(this,"error",n)||this;return i.message=t.message,i.error=t,i}return o(t,e),t}(a),h=function(e){function t(t,n,i){void 0===t&&(t=1e3),void 0===n&&(n="");var o=e.call(this,"close",i)||this;return o.wasClean=!0,o.code=t,o.reason=n,o}return o(t,e),t}(a),l=function(){if("undefined"!=typeof WebSocket)return WebSocket},u={maxReconnectionDelay:1e4,minReconnectionDelay:1e3+4e3*Math.random(),minUptime:5e3,reconnectionDelayGrowFactor:1.3,connectionTimeout:4e3,maxRetries:1/0,maxEnqueuedMessages:1/0,startClosed:!1,debug:!1},f=function(){function e(e,t,n){var i=this;void 0===n&&(n={}),this._listeners={error:[],message:[],open:[],close:[]},this._retryCount=-1,this._shouldReconnect=!0,this._connectLock=!1,this._binaryType="blob",this._closeCalled=!1,this._messageQueue=[],this.onclose=null,this.onerror=null,this.onmessage=null,this.onopen=null,this._handleOpen=function(e){i._debug("open event");var t=i._options.minUptime,n=void 0===t?u.minUptime:t;clearTimeout(i._connectTimeout),i._uptimeTimeout=setTimeout((function(){return i._acceptOpen()}),n),i._ws.binaryType=i._binaryType,i._messageQueue.forEach((function(e){return i._ws.send(e)})),i._messageQueue=[],i.onopen&&i.onopen(e),i._listeners.open.forEach((function(t){return i._callEventListener(e,t)}))},this._handleMessage=function(e){i._debug("message event"),i.onmessage&&i.onmessage(e),i._listeners.message.forEach((function(t){return i._callEventListener(e,t)}))},this._handleError=function(e){i._debug("error event",e.message),i._disconnect(void 0,"TIMEOUT"===e.message?"timeout":void 0),i.onerror&&i.onerror(e),i._debug("exec error listeners"),i._listeners.error.forEach((function(t){return i._callEventListener(e,t)})),i._connect()},this._handleClose=function(e){i._debug("close event"),i._clearTimeouts(),i._shouldReconnect&&i._connect(),i.onclose&&i.onclose(e),i._listeners.close.forEach((function(t){return i._callEventListener(e,t)}))},this._url=e,this._protocols=t,this._options=n,this._options.startClosed&&(this._shouldReconnect=!1),this._connect()}return Object.defineProperty(e,"CONNECTING",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e,"OPEN",{get:function(){return 1},enumerable:!0,configurable:!0}),Object.defineProperty(e,"CLOSING",{get:function(){return 2},enumerable:!0,configurable:!0}),Object.defineProperty(e,"CLOSED",{get:function(){return 3},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CONNECTING",{get:function(){return e.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"OPEN",{get:function(){return e.OPEN},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CLOSING",{get:function(){return e.CLOSING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"CLOSED",{get:function(){return e.CLOSED},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"binaryType",{get:function(){return this._ws?this._ws.binaryType:this._binaryType},set:function(e){this._binaryType=e,this._ws&&(this._ws.binaryType=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"retryCount",{get:function(){return Math.max(this._retryCount,0)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bufferedAmount",{get:function(){return this._messageQueue.reduce((function(e,t){return"string"==typeof t?e+=t.length:t instanceof Blob?e+=t.size:e+=t.byteLength,e}),0)+(this._ws?this._ws.bufferedAmount:0)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"extensions",{get:function(){return this._ws?this._ws.extensions:""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"protocol",{get:function(){return this._ws?this._ws.protocol:""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readyState",{get:function(){return this._ws?this._ws.readyState:this._options.startClosed?e.CLOSED:e.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"url",{get:function(){return this._ws?this._ws.url:""},enumerable:!0,configurable:!0}),e.prototype.close=function(e,t){void 0===e&&(e=1e3),this._closeCalled=!0,this._shouldReconnect=!1,this._clearTimeouts(),this._ws?this._ws.readyState!==this.CLOSED?this._ws.close(e,t):this._debug("close: already closed"):this._debug("close enqueued: no ws instance")},e.prototype.reconnect=function(e,t){this._shouldReconnect=!0,this._closeCalled=!1,this._retryCount=-1,this._ws&&this._ws.readyState!==this.CLOSED?(this._disconnect(e,t),this._connect()):this._connect()},e.prototype.send=function(e){if(this._ws&&this._ws.readyState===this.OPEN)this._debug("send",e),this._ws.send(e);else{var t=this._options.maxEnqueuedMessages,n=void 0===t?u.maxEnqueuedMessages:t;this._messageQueue.length<n&&(this._debug("enqueue",e),this._messageQueue.push(e))}},e.prototype.addEventListener=function(e,t){this._listeners[e]&&this._listeners[e].push(t)},e.prototype.dispatchEvent=function(e){var t,n,i=this._listeners[e.type];if(i)try{for(var o=function(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}(i),s=o.next();!s.done;s=o.next()){var r=s.value;this._callEventListener(e,r)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return!0},e.prototype.removeEventListener=function(e,t){this._listeners[e]&&(this._listeners[e]=this._listeners[e].filter((function(e){return e!==t})))},e.prototype._debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._options.debug&&console.log.apply(console,r(["RWS>"],e))},e.prototype._getNextDelay=function(){var e=this._options,t=e.reconnectionDelayGrowFactor,n=void 0===t?u.reconnectionDelayGrowFactor:t,i=e.minReconnectionDelay,o=void 0===i?u.minReconnectionDelay:i,s=e.maxReconnectionDelay,r=void 0===s?u.maxReconnectionDelay:s,a=0;return this._retryCount>0&&(a=o*Math.pow(n,this._retryCount-1))>r&&(a=r),this._debug("next delay",a),a},e.prototype._wait=function(){var e=this;return new Promise((function(t){setTimeout(t,e._getNextDelay())}))},e.prototype._getNextUrl=function(e){if("string"==typeof e)return Promise.resolve(e);if("function"==typeof e){var t=e();if("string"==typeof t)return Promise.resolve(t);if(t.then)return t}throw Error("Invalid URL")},e.prototype._connect=function(){var e=this;if(!this._connectLock&&this._shouldReconnect){this._connectLock=!0;var t=this._options,n=t.maxRetries,i=void 0===n?u.maxRetries:n,o=t.connectionTimeout,s=void 0===o?u.connectionTimeout:o,r=t.WebSocket,a=void 0===r?l():r;if(this._retryCount>=i)this._debug("max retries reached",this._retryCount,">=",i);else{if(this._retryCount++,this._debug("connect",this._retryCount),this._removeListeners(),void 0===(c=a)||!c||2!==c.CLOSING)throw Error("No valid WebSocket class provided");var c;this._wait().then((function(){return e._getNextUrl(e._url)})).then((function(t){e._closeCalled||(e._debug("connect",{url:t,protocols:e._protocols}),e._ws=e._protocols?new a(t,e._protocols):new a(t),e._ws.binaryType=e._binaryType,e._connectLock=!1,e._addListeners(),e._connectTimeout=setTimeout((function(){return e._handleTimeout()}),s))}))}}},e.prototype._handleTimeout=function(){this._debug("timeout event"),this._handleError(new c(Error("TIMEOUT"),this))},e.prototype._disconnect=function(e,t){if(void 0===e&&(e=1e3),this._clearTimeouts(),this._ws){this._removeListeners();try{this._ws.close(e,t),this._handleClose(new h(e,t,this))}catch(e){}}},e.prototype._acceptOpen=function(){this._debug("accept open"),this._retryCount=0},e.prototype._callEventListener=function(e,t){"handleEvent"in t?t.handleEvent(e):t(e)},e.prototype._removeListeners=function(){this._ws&&(this._debug("removeListeners"),this._ws.removeEventListener("open",this._handleOpen),this._ws.removeEventListener("close",this._handleClose),this._ws.removeEventListener("message",this._handleMessage),this._ws.removeEventListener("error",this._handleError))},e.prototype._addListeners=function(){this._ws&&(this._debug("addListeners"),this._ws.addEventListener("open",this._handleOpen),this._ws.addEventListener("close",this._handleClose),this._ws.addEventListener("message",this._handleMessage),this._ws.addEventListener("error",this._handleError))},e.prototype._clearTimeouts=function(){clearTimeout(this._connectTimeout),clearTimeout(this._uptimeTimeout)},e}(),d=100;function p(e,t,n,i,o){var s=8;return i<2*s&&(s=i/2),o<2*s&&(s=o/2),e.beginPath(),e.moveTo(t+s,n),e.arcTo(t+i,n,t+i,n+o,s),e.arcTo(t+i,n+o,t,n+o,s),e.arcTo(t,n+o,t,n,s),e.arcTo(t,n,t+i,n,s),e.closePath(),e}function v(e,t,n,i,o){return e.beginPath(),e.lineWidth="3",e.strokeStyle="#52ff80B3",e.moveTo(t+5,n),e.arcTo(t+i,n,t+i,n+o,5),e.arcTo(t+i,n+o,t,n+o,5),e.arcTo(t,n+o,t,n,5),e.arcTo(t,n,t+i,n,5),e.closePath(),e.stroke()}function g(e,t){var n=Math.abs(e-t);return Math.floor(.12*n)}function y(e){return e+Math.abs(15*Math.sin((Math.floor((new Date).getTime()/6%360)-180)*Math.PI/180))}function _(e){return e+Math.abs(15*Math.cos((Math.floor((new Date).getTime()/6%360)-180)*Math.PI/180))}function w(){var e=Math.abs(Math.sin((Math.floor((new Date).getTime()/2%360)-180)*Math.PI/180));return e>.5?e:.5}var m=14,B=15,x=16,b=17,k=19,I=20,E=21,S=22,L=23,T=24,C=n(0),M=n.n(C),O=n(1),P=n.n(O),V=n(2),R=n.n(V),A=n(3),W=n.n(A),G=n(4),j=n.n(G),H=n(5),D=n.n(H),N=n(6),F=n.n(N),X=n(7),Y=n.n(X),U=n(8),q=n.n(U),Q=n(9),z=n.n(Q);function J(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],i=!0,o=!1,s=void 0;try{for(var r,a=e[Symbol.iterator]();!(i=(r=a.next()).done)&&(n.push(r.value),!t||n.length!==t);i=!0);}catch(e){o=!0,s=e}finally{try{i||null==a.return||a.return()}finally{if(o)throw s}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return $(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function K(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var Z="Вы успешно прошли проверку!",ee={1:"Изображение невозможно обработать",2:"Слишком низкое качество изображения",3:"Изображение недостаточно четкое",4:"Изображение засвечено",5:"Изображение слишком темное",6:"Изображение слишком светлое",7:"Изображение имеет блики",8:"Не найдено лицо",9:"Изображение содержит множество лиц",10:"Недостаточная ширина кадра",11:"Недостаточная высота кадра",12:"Недостаточная ширина лица",13:"Недостаточная высота лица",14:"Ваше лицо слишком близко к верхнему краю кадра",15:"Ваше лицо слишком близко к правому краю кадра",16:"Ваше лицо слишком близко к нижнему краю кадра",17:"Ваше лицо слишком близко к левому краю кадра",18:"Ошибка определения положения головы",19:"Поверните ваше лицо вправо",20:"Поверните ваше лицо влево",21:"Ваша голова слишком наклонена вправо",22:"Ваша голова слишком наклонена влево",23:"Поднимите подбородок",24:"Опустите подбородок",25:"Ошибка определения перекрытия лица (рта)",26:"Ваше лицо перекрыто другим объектом",27:"Ошибка определения очков",28:"Снимите очки",29:"Ошибка проверки общего качества изображения",30:"Общее качество изображения (AGS) низкое",31:"Ошибка проверки Liveness",32:"Ваша оценка Liveness слишком низка",33:"Слишком низкое качество оценки Liveness",34:"Ошибка определения лица в кадре"},te={100:"Отсутствует соединение"},ne=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.FRAME_WIDTH=t,this.FRAME_HEIGHT=n,this.imgPaths={up:M.a,down:P.a,left:R.a,right:W.a,yawLeft:j.a,yawRight:D.a,pitchBack:F.a,pitchFront:Y.a,rotationLeft:q.a,rotationRight:z.a},this.images={}}var t,n,i;return t=e,(n=[{key:"init",value:function(e,t){this.dpr=window.devicePixelRatio,this.canvasInfo=document.createElement("canvas"),this.canvasInfo.id="".concat(e,"-canvasInfo"),this.canvasInfo.style.position="absolute",this.canvasInfo.style.top=0,this.canvasInfo.style.left=0,this.canvasInfo.width=this.FRAME_WIDTH*this.dpr,this.canvasInfo.height=this.FRAME_HEIGHT*this.dpr,t.appendChild(this.canvasInfo),this.canvasInfo.style.width="".concat(this.FRAME_WIDTH,"px"),this.canvasInfo.style.height="".concat(this.FRAME_HEIGHT,"px"),this.ctxInfo=this.canvasInfo.getContext("2d"),this.ctxInfo.scale(this.dpr,this.dpr),this.faceBB={x:0,y:0,w:0,h:0,nX:this.FRAME_WIDTH/2-90,nY:this.FRAME_HEIGHT/2-125,nW:180,nH:250,sX:1,sY:1},this._loadImages()}},{key:"_loadImages",value:function(){var e=this;Object.entries(this.imgPaths).forEach((function(t){var n=J(t,2),i=n[0],o=n[1];new Promise((function(e,t){var n=new Image;n.addEventListener("load",(function(){return e(n)})),n.addEventListener("error",(function(e){return t(e)})),n.src=o})).then((function(t){e.images[i]=t}))}))}},{key:"renderInfo",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;cancelAnimationFrame(this.reqId),this.ctxInfo.clearRect(0,0,this.canvasInfo.width,this.canvasInfo.height),this._renderConnectionStatus(e),n?this._renderText(n[0]):this._renderText(),i&&this._renderFaceRect(i,n&&n),this.reqId=requestAnimationFrame((function(){return t.renderInfo(e,n,i)}))}},{key:"_renderText",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=[14,15,16,17,18,19,20,21,22,23,24];if(!t.some((function(t){return e===t}))){this.ctxInfo.font="18px Georgia",this.ctxInfo.fillStyle="rgba(100, 100, 100, .5)";var n=this.ctxInfo.measureText(e?e>=100?te[e]:ee[e]:Z),i=n.actualBoundingBoxLeft+n.actualBoundingBoxRight,o=n.actualBoundingBoxAscent+n.actualBoundingBoxDescent;p(this.ctxInfo,this.FRAME_WIDTH/2-i/2-10,10,i+20,o+20).fill(),this.ctxInfo.textAlign="center",this.ctxInfo.fillStyle=e?"white":"#00FF00",this.ctxInfo.fillText(e?e>=100?te[e]:ee[e]:Z,this.FRAME_WIDTH/2,20+n.actualBoundingBoxAscent)}}},{key:"_renderFaceRect",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e&&(this.faceBB.x=Math.floor(e.x),this.faceBB.y=Math.floor(e.y),this.faceBB.w=Math.floor(e.width),this.faceBB.h=Math.floor(e.height)),this.faceBB.sX=g(this.faceBB.x,this.faceBB.nX),this.faceBB.sY=g(this.faceBB.y,this.faceBB.nY),this.faceBB.nX=this.faceBB.x>this.faceBB.nX?this.faceBB.nX+this.faceBB.sX:this.faceBB.x<this.faceBB.nX?this.faceBB.nX-this.faceBB.sX:this.faceBB.x,this.faceBB.nY=this.faceBB.y>this.faceBB.nY?this.faceBB.nY+this.faceBB.sY:this.faceBB.y<this.faceBB.nY?this.faceBB.nY-this.faceBB.sY:this.faceBB.y,this.faceBB.nW=this.faceBB.w>this.faceBB.nW?this.faceBB.nW+1:this.faceBB.w<this.faceBB.nW?this.faceBB.nW-1:this.faceBB.w,this.faceBB.nH=this.faceBB.h>this.faceBB.nH?this.faceBB.nH+1:this.faceBB.h<this.faceBB.nH?this.faceBB.nH-1:this.faceBB.h,v(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(m)&&this._arrowDown(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(B)&&this._arrowLeft(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(x)&&this._arrowUp(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(b)&&this._arrowRight(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(k)&&!t.includes(x)&&this._yawRight(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(I)&&!t.includes(x)&&this._yawLeft(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(E)&&!t.includes(x)&&!t.includes(L)&&this._rotateLeft(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(S)&&!t.includes(x)&&!t.includes(L)&&this._rotateRight(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(L)&&!t.includes(b)&&this._pitchBack(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH),t&&t.includes(T)&&!t.includes(b)&&this._pitchFront(this.ctxInfo,this.faceBB.nX,this.faceBB.nY,this.faceBB.nW,this.faceBB.nH)}},{key:"_arrowLeft",value:function(e,t,n,i,o){var s=n+o/2-22.5;this.images.left&&e.drawImage(this.images.left,y(t-60),s,45,45)}},{key:"_arrowRight",value:function(e,t,n,i,o){var s=n+o/2-22.5;this.images.right&&e.drawImage(this.images.right,_(t+i+10),s,45,45)}},{key:"_arrowUp",value:function(e,t,n,i){var o=t+i/2-22.5;this.images.up&&e.drawImage(this.images.up,o,y(n-60),45,45)}},{key:"_arrowDown",value:function(e,t,n,i,o){var s=t+i/2-22.5;this.images.down&&e.drawImage(this.images.down,s,_(n+o+10),45,45)}},{key:"_pitchBack",value:function(e,t,n,i,o){var s=n+o/2-22.5;this.images.pitchBack&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.pitchBack,t+i+10,s,45,45),e.restore())}},{key:"_pitchFront",value:function(e,t,n,i,o){var s=n+o/2-22.5;this.images.pitchFront&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.pitchFront,t+i+10,s,45,45),e.restore())}},{key:"_rotateLeft",value:function(e,t,n,i){var o=t+i/2-22.5;this.images.rotationLeft&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.rotationLeft,o,n-60,45,45),e.restore())}},{key:"_rotateRight",value:function(e,t,n,i){var o=t+i/2-22.5;this.images.rotationRight&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.rotationRight,o,n-60,45,45),e.restore())}},{key:"_yawLeft",value:function(e,t,n,i){var o=t+i/2-22.5;this.images.yawLeft&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.yawLeft,o,n-60,45,45),e.restore())}},{key:"_yawRight",value:function(e,t,n,i){var o=t+i/2-22.5;this.images.yawRight&&(e.save(),e.globalAlpha=w(),e.drawImage(this.images.yawRight,o,n-60,45,45),e.restore())}},{key:"_renderConnectionStatus",value:function(e){this._opacity=Math.abs(Math.sin((Math.floor((new Date).getTime()/10%360)-180)*Math.PI/180));var t="RGBA(135,240,0, ".concat(this._opacity,")");this.ctxInfo.beginPath(),this.ctxInfo.arc(16,16,8,0,2*Math.PI,!1),this.ctxInfo.fillStyle=e?t:"red",this.ctxInfo.fill()}}])&&K(t.prototype,n),i&&K(t,i),e}();function ie(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var oe=function(){function e(t,n,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.rootNode=t,this.video=null,this.canvasVideo=null,this.wsConnectionString=n,this.onReady=i,this.onSuccess=o,this.isWSConnected=!1,this.isCameraAttached=!1,this.isVideoAttached=!1,this.isProcessing=!1,this.ws=null,this._videoWidth=640,this._videoHeight=480,this.info=new ne(640,480),this.init()}var t,n,i;return t=e,(n=[{key:"init",value:function(){var e=this;this._initDOM(),this._attachCamera().then((function(){return e._attachVideo()})).then((function(){return e._connectWS()})).then((function(){e.onReady&&e.onReady(e)}))}},{key:"_initDOM",value:function(){var e=document.createElement("div");e.id="".concat("vllunapass","-wrapper"),e.style.position="relative",this.dpr=window.devicePixelRatio,this.rootNode.appendChild(e),this.video=document.createElement("video"),this.video.id="".concat("vllunapass","-video"),this.video.style.display="none",e.appendChild(this.video),this.canvasVideo=document.createElement("canvas"),this.canvasVideo.id="".concat("vllunapass","-canvasVideo"),this.canvasVideo.width=640,this.canvasVideo.height=480,this.canvasVideo.style.width="".concat(640,"px"),this.canvasVideo.style.height="".concat(480,"px"),e.appendChild(this.canvasVideo),this.ctxVideo=this.canvasVideo.getContext("2d"),this.ctxVideo.translate(this._videoWidth,0),this.ctxVideo.scale(-1,1),this.info.init("vllunapass",e)}},{key:"_attachCamera",value:function(){var e=this;return new Promise((function(t,n){navigator.mediaDevices.getUserMedia({video:{width:{ideal:640},height:{ideal:480}},audio:!1}).then((function(n){e.video.srcObject=n,e.video.play(),e.isCameraAttached=!0,t(n)})).catch((function(e){console.error("An error occurred: ".concat(e)),n(e)}))}))}},{key:"_attachVideo",value:function(){var e=this;return new Promise((function(t){e.video.addEventListener("canplay",(function(){var n=e.video,i=n.videoWidth,o=n.videoHeight;if(e._videoWidth=i,e._videoHeight=o/(i/e._videoWidth),Number.isNaN(e._videoHeight)&&(e._videoHeight=e._videoWidth/(4/3)),e._videoWidth<640||e._videoHeight<480)throw Error("Слишком маленькое разрешение для камеры");e._renderVideo(),e.isVideoAttached=!0,t()}),!1)}))}},{key:"_renderVideo",value:function(){var e=this;if(this.video.readyState===this.video.HAVE_ENOUGH_DATA){var t=this._videoHeight/this.canvasVideo.height,n=(this.canvasVideo.width-this._videoWidth/t)/2,i=this._videoWidth/t;this.ctxVideo.drawImage(this.video,n,0,i,this.canvasVideo.height)}requestAnimationFrame((function(){return e._renderVideo()}))}},{key:"_connectWS",value:function(){var e=this;return new Promise((function(t,n){e.ws=new f(e.wsConnectionString,null),e.ws.onopen=function(){e.isWSConnected=!0,t(e.ws)},e.ws.onerror=function(t){e.isWSConnected=!1,e.info.renderInfo(e.isWSConnected,[d]),n(t)},e.ws.onclose=function(){e.isWSConnected=!1,e.info.renderInfo(e.isWSConnected)}}))}},{key:"checkLiveness",value:function(){var e=this;this.isReady&&(this.ws.onmessage=function(t){e._handleResponse(t)},setTimeout((function(){return e._sendPhoto()}),200))}},{key:"_handleResponse",value:function(e){var t=this,n=JSON.parse(e.data);if(!n.isOk&&n.details){var i=n.details.faceFramePosition.faceRect,o=n.errors;this.info.renderInfo(this.isWSConnected,o,i)}if(!n.isOk&&!n.details){var s=n.errors;this.info.renderInfo(this.isWSConnected,s)}n.isOk?(this.onSuccess&&this.onSuccess(n),this.info.renderInfo(this.isWSConnected),this.ws.close()):setTimeout((function(){return t._sendPhoto()}),200)}},{key:"_sendPhoto",value:function(){var e=this.canvasVideo.toDataURL("image/png");this.ws.send(e)}},{key:"isReady",get:function(){return this.isCameraAttached&&this.isVideoAttached&&this.isWSConnected}}])&&ie(t.prototype,n),i&&ie(t,i),e}();window.LunaPass=oe}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy91cC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9kb3duLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL2xlZnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWcvcmlnaHQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWcveWF3X2xlZnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWcveWF3X3JpZ2h0LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL3BpdGNoX2JhY2suc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWcvcGl0Y2hfZnJvbnQuc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWcvcm90YXRpb25fbGVmdC5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9yb3RhdGlvbl9yaWdodC5zdmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29ubmVjdGluZy13ZWJzb2NrZXQvZGlzdC9yZWNvbm5lY3Rpbmctd2Vic29ja2V0LW1qcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmV0RXJyb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXJyb3JUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5mby5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbHVuYXBhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZXh0ZW5kU3RhdGljcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX19leHRlbmRzIiwiX18iLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJfX3JlYWQiLCJpdGVyYXRvciIsImUiLCJhciIsIm5leHQiLCJkb25lIiwicHVzaCIsImVycm9yIiwiX19zcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjb25jYXQiLCJFdmVudCIsInR5cGUiLCJ0YXJnZXQiLCJFcnJvckV2ZW50IiwiX3N1cGVyIiwiX3RoaXMiLCJtZXNzYWdlIiwiQ2xvc2VFdmVudCIsImNvZGUiLCJyZWFzb24iLCJ3YXNDbGVhbiIsImdldEdsb2JhbFdlYlNvY2tldCIsIldlYlNvY2tldCIsIkRFRkFVTFQiLCJtYXhSZWNvbm5lY3Rpb25EZWxheSIsIm1pblJlY29ubmVjdGlvbkRlbGF5IiwiTWF0aCIsInJhbmRvbSIsIm1pblVwdGltZSIsInJlY29ubmVjdGlvbkRlbGF5R3Jvd0ZhY3RvciIsImNvbm5lY3Rpb25UaW1lb3V0IiwibWF4UmV0cmllcyIsIkluZmluaXR5IiwibWF4RW5xdWV1ZWRNZXNzYWdlcyIsInN0YXJ0Q2xvc2VkIiwiZGVidWciLCJSZWNvbm5lY3RpbmdXZWJTb2NrZXQiLCJ1cmwiLCJwcm90b2NvbHMiLCJvcHRpb25zIiwiX2xpc3RlbmVycyIsIm9wZW4iLCJjbG9zZSIsIl9yZXRyeUNvdW50IiwiX3Nob3VsZFJlY29ubmVjdCIsIl9jb25uZWN0TG9jayIsIl9iaW5hcnlUeXBlIiwiX2Nsb3NlQ2FsbGVkIiwiX21lc3NhZ2VRdWV1ZSIsIm9uY2xvc2UiLCJvbmVycm9yIiwib25tZXNzYWdlIiwib25vcGVuIiwiX2hhbmRsZU9wZW4iLCJldmVudCIsIl9kZWJ1ZyIsIl9hIiwiX29wdGlvbnMiLCJjbGVhclRpbWVvdXQiLCJfY29ubmVjdFRpbWVvdXQiLCJfdXB0aW1lVGltZW91dCIsInNldFRpbWVvdXQiLCJfYWNjZXB0T3BlbiIsIl93cyIsImJpbmFyeVR5cGUiLCJmb3JFYWNoIiwic2VuZCIsImxpc3RlbmVyIiwiX2NhbGxFdmVudExpc3RlbmVyIiwiX2hhbmRsZU1lc3NhZ2UiLCJfaGFuZGxlRXJyb3IiLCJfZGlzY29ubmVjdCIsInVuZGVmaW5lZCIsIl9jb25uZWN0IiwiX2hhbmRsZUNsb3NlIiwiX2NsZWFyVGltZW91dHMiLCJfdXJsIiwiX3Byb3RvY29scyIsImNvbmZpZ3VyYWJsZSIsIkNPTk5FQ1RJTkciLCJPUEVOIiwiQ0xPU0lORyIsIkNMT1NFRCIsInNldCIsIm1heCIsInJlZHVjZSIsImFjYyIsIkJsb2IiLCJzaXplIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlcmVkQW1vdW50IiwiZXh0ZW5zaW9ucyIsInByb3RvY29sIiwicmVhZHlTdGF0ZSIsInJlY29ubmVjdCIsImRhdGEiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImVfMSIsImxpc3RlbmVycyIsImxpc3RlbmVyc18xIiwiX192YWx1ZXMiLCJsaXN0ZW5lcnNfMV8xIiwiZV8xXzEiLCJyZXR1cm4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZmlsdGVyIiwiYXJncyIsIl9pIiwiY29uc29sZSIsImxvZyIsImFwcGx5IiwiX2dldE5leHREZWxheSIsIl9iIiwiX2MiLCJfZCIsImRlbGF5IiwicG93IiwiX3dhaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIl9nZXROZXh0VXJsIiwidXJsUHJvdmlkZXIiLCJ0aGVuIiwiRXJyb3IiLCJfcmVtb3ZlTGlzdGVuZXJzIiwidyIsIl9hZGRMaXN0ZW5lcnMiLCJfaGFuZGxlVGltZW91dCIsImhhbmRsZUV2ZW50Iiwicm91bmRSZWN0IiwiY3R4IiwieCIsInkiLCJoIiwicmFkaXVzIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwiYXJjVG8iLCJjbG9zZVBhdGgiLCJmYWNlUmVjdCIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwic3Ryb2tlIiwiY2FsY1NwZWVkIiwieDEiLCJ4MiIsImFicyIsImZsb29yIiwibW92ZVBvaW50UG9zIiwic2luIiwiRGF0ZSIsImdldFRpbWUiLCJQSSIsIm1vdmVQb2ludE5lZyIsImNvcyIsImJsaW5rIiwiU1VDQ0VTU19NRVNTQUdFIiwiRVJST1JfQ09ERVMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSIsIjI2IiwiMjciLCIyOCIsIjI5IiwiMzAiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIk5FVF9FUlJPUl9DT0RFUyIsIjEwMCIsIkluZm8iLCJGUkFNRV9XSURUSCIsIkZSQU1FX0hFSUdIVCIsImltZ1BhdGhzIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0IiwieWF3TGVmdCIsInlhd1JpZ2h0IiwicGl0Y2hCYWNrIiwicGl0Y2hGcm9udCIsInJvdGF0aW9uTGVmdCIsInJvdGF0aW9uUmlnaHQiLCJpbWFnZXMiLCJET01fUFJFRklYIiwid3JhcHBlciIsImRwciIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJjYW52YXNJbmZvIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJhcHBlbmRDaGlsZCIsImN0eEluZm8iLCJnZXRDb250ZXh0Iiwic2NhbGUiLCJmYWNlQkIiLCJuWCIsIm5ZIiwiblciLCJuSCIsInNYIiwic1kiLCJfbG9hZEltYWdlcyIsImVudHJpZXMiLCJrIiwidiIsInJlcyIsInJlaiIsImltZyIsIkltYWdlIiwiZXJyIiwic3JjIiwiaXNXU0Nvbm5lY3RlZCIsImVycm9ycyIsImZhY2VSZWN0UG9zIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXFJZCIsImNsZWFyUmVjdCIsIl9yZW5kZXJDb25uZWN0aW9uU3RhdHVzIiwiX3JlbmRlclRleHQiLCJfcmVuZGVyRmFjZVJlY3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZW5kZXJJbmZvIiwiZXJyb3JDb2RlIiwiaW5jb3JyZWN0RmFjZVBvcyIsInNvbWUiLCJudW0iLCJmb250IiwiZmlsbFN0eWxlIiwidGV4dE1ldHJpY3MiLCJtZWFzdXJlVGV4dCIsInRleHRXaWR0aCIsImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsImFjdHVhbEJvdW5kaW5nQm94UmlnaHQiLCJ0ZXh0SGVpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJURVhUX1BBRERJTkciLCJmaWxsIiwidGV4dEFsaWduIiwiZmlsbFRleHQiLCJpbmNsdWRlcyIsImVycm9ySXMiLCJfYXJyb3dEb3duIiwiX2Fycm93TGVmdCIsIl9hcnJvd1VwIiwiX2Fycm93UmlnaHQiLCJfeWF3UmlnaHQiLCJfeWF3TGVmdCIsIl9yb3RhdGVMZWZ0IiwiX3JvdGF0ZVJpZ2h0IiwiX3BpdGNoQmFjayIsIl9waXRjaEZyb250IiwicmVjdFlDZW50ZXIiLCJJQ09OX1NJWkUiLCJkcmF3SW1hZ2UiLCJyZWN0WENlbnRlciIsInNhdmUiLCJnbG9iYWxBbHBoYSIsInJlc3RvcmUiLCJfb3BhY2l0eSIsImJsaW5raW5nIiwiYXJjIiwiTHVuYVBhc3MiLCJyb290Iiwid3NDb25uZWN0aW9uU3RyaW5nIiwib25SZWFkeSIsIm9uU3VjY2VzcyIsInJvb3ROb2RlIiwidmlkZW8iLCJjYW52YXNWaWRlbyIsImlzQ2FtZXJhQXR0YWNoZWQiLCJpc1ZpZGVvQXR0YWNoZWQiLCJpc1Byb2Nlc3NpbmciLCJ3cyIsIl92aWRlb1dpZHRoIiwiX3ZpZGVvSGVpZ2h0IiwiaW5mbyIsImluaXQiLCJfaW5pdERPTSIsIl9hdHRhY2hDYW1lcmEiLCJfYXR0YWNoVmlkZW8iLCJfY29ubmVjdFdTIiwiZGlzcGxheSIsImN0eFZpZGVvIiwidHJhbnNsYXRlIiwicmVqZWN0IiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwiaWRlYWwiLCJhdWRpbyIsInN0cmVhbSIsInNyY09iamVjdCIsInBsYXkiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJOdW1iZXIiLCJpc05hTiIsIl9yZW5kZXJWaWRlbyIsIkhBVkVfRU5PVUdIX0RBVEEiLCJoUmF0aW8iLCJ4T2Zmc2V0IiwiZFdpZHRoIiwiUmVjb25uZWN0aW5nV2Vic29ja2V0IiwibmV0RXJyb3JzIiwiaXNSZWFkeSIsIl9oYW5kbGVSZXNwb25zZSIsIl9zZW5kUGhvdG8iLCJ3c01lc3NhZ2UiLCJyZXNwIiwiSlNPTiIsInBhcnNlIiwiaXNPayIsImRldGFpbHMiLCJmYWNlRnJhbWVQb3NpdGlvbiIsInNob3QiLCJ0b0RhdGFVUkwiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVB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bUJyVCxLQUFLeVAsbUIsa0NDNUJqRWhDLE9BQU9tRixTQUFXQSIsImZpbGUiOiJsdW5hLXBhc3MtMC4wLjFhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMjUuMC4xLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzZSAlM2NzdmcgdmVyc2lvbj0nMS4xJyBpZD0nTGF5ZXJfMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgeD0nMHB4JyB5PScwcHgnIHZpZXdCb3g9JzAgMCAyNCAyNCcgc3R5bGU9J2VuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7JyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzZSAlM2NwYXRoIHN0eWxlPSdmaWxsOm5vbmU7c3Ryb2tlOiUyMzUyZmY4MDtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7JyBkPSdNMTIsMTlWNScvJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzNTJmZjgwO3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J001LDEybDctN2w3LDcnLyUzZSAlM2Mvc3ZnJTNlXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzYyEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI1LjAuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgLS0lM2UgJTNjc3ZnIHZlcnNpb249JzEuMScgaWQ9J0xheWVyXzEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHg9JzBweCcgeT0nMHB4JyB2aWV3Qm94PScwIDAgMjQgMjQnIHN0eWxlPSdlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0OycgeG1sOnNwYWNlPSdwcmVzZXJ2ZSclM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjM1MmZmODA7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTEyLDV2MTQnLyUzZSAlM2NwYXRoIHN0eWxlPSdmaWxsOm5vbmU7c3Ryb2tlOiUyMzUyZmY4MDtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7JyBkPSdNMTksMTJsLTcsN2wtNy03Jy8lM2UgJTNjL3N2ZyUzZVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNS4wLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNlICUzY3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHlsZT0nZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDsnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzNTJmZjgwO3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J00xOSwxMkg1Jy8lM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjM1MmZmODA7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTEyLDE5bC03LTdsNy03Jy8lM2UgJTNjL3N2ZyUzZVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNS4wLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNlICUzY3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHlsZT0nZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDsnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzNTJmZjgwO3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J001LDEyaDE0Jy8lM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjM1MmZmODA7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTEyLDVsNyw3bC03LDcnLyUzZSAlM2Mvc3ZnJTNlXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzYyEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI1LjAuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgLS0lM2UgJTNjc3ZnIHZlcnNpb249JzEuMScgaWQ9J0xheWVyXzEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHg9JzBweCcgeT0nMHB4JyB2aWV3Qm94PScwIDAgMjQgMjQnIHN0eWxlPSdlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0OycgeG1sOnNwYWNlPSdwcmVzZXJ2ZSclM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjMwMGZmNDQ7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTQuOTksMTMuOTEgYy0xLjQ2LTAuNjgtMi4zOC0xLjU2LTIuNjEtMi40OEMyLjE0LDEwLjUyLDIuNTksOS41OSwzLjY1LDguOGMxLjA3LTAuNzksMi43LTEuMzksNC42NS0xLjc0YzEuOTUtMC4zMyw0LjEyLTAuMzgsNi4xNi0wLjE0IGMyLjA1LDAuMjUsMy44NywwLjc4LDUuMiwxLjUyYzEuMzIsMC43MywyLjA4LDEuNjMsMi4xNSwyLjU2YzAuMDcsMC45My0wLjU2LDEuODQtMS43NywyLjU4Yy0xLjIyLDAuNzUtMi45NiwxLjMtNC45NywxLjU3IEw4LjU4LDE2LjFMMTIsMTcuNDVMOC41OCwxNi4xbDMuODQtMi42MycvJTNlICUzYy9zdmclM2VcIiIsIm1vZHVsZS5leHBvcnRzID0gXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMjUuMC4xLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzZSAlM2NzdmcgdmVyc2lvbj0nMS4xJyBpZD0nTGF5ZXJfMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgeD0nMHB4JyB5PScwcHgnIHZpZXdCb3g9JzAgMCAyNCAyNCcgc3R5bGU9J2VuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMjQgMjQ7JyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzZSAlM2NwYXRoIHN0eWxlPSdmaWxsOm5vbmU7c3Ryb2tlOiUyMzAwZmY0NDtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7JyBkPSdNMTEuNjgsMTMuNDZsMy43NywyLjcyIGwtNC4wOSwxLjQ5bDQuMDktMS40OWwtNi40Ny0xLjEyYy0yLjAxLTAuMzItMy43My0wLjkxLTQuOTMtMS42OWMtMS4yLTAuNzgtMS44LTEuNy0xLjcxLTIuNjNjMC4wOS0wLjkyLDAuODctMS44LDIuMjEtMi41IHMzLjE4LTEuMTgsNS4yMy0xLjM5YzIuMDUtMC4xOSw0LjIyLTAuMDksNi4xNiwwLjI5YzEuOTQsMC4zOSwzLjU2LDEuMDQsNC42MSwxLjg1czEuNDcsMS43NiwxLjIxLDIuNjcgYy0wLjI2LDAuOTEtMS4yLDEuNzctMi42NywyLjQxJy8lM2UgJTNjL3N2ZyUzZVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNS4wLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNlICUzY3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHlsZT0nZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDsnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzMDBmZjQ0O3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J003LjgsOS4wNiBjMC4zOC0yLjExLDEuMDgtMy45NywxLjk5LTUuM2MwLjkxLTEuMzMsMS45OC0yLjA2LDMuMDUtMi4wOWMxLjA3LTAuMDIsMi4wOCwwLjY3LDIuODgsMS45NmMwLjgsMS4zLDEuMzUsMy4xMywxLjU2LDUuMjIgYzAuMjEsMi4wOSwwLjA4LDQuMzMtMC4zOSw2LjM5Yy0wLjQ2LDIuMDUtMS4yMywzLjgtMi4xOCw0Ljk5Yy0wLjk1LDEuMTgtMi4wNCwxLjc0LTMuMSwxLjU4Yy0xLjA2LTAuMTYtMi4wMy0xLjAyLTIuNzctMi40NSBsLTIuNDktNC41MmwwLjAzLDMuNzVsLTAuMDMtMy43NWw0LjI1LDMuNTEnLyUzZSAlM2Mvc3ZnJTNlXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzYyEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI1LjAuMSwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgLS0lM2UgJTNjc3ZnIHZlcnNpb249JzEuMScgaWQ9J0xheWVyXzEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHg9JzBweCcgeT0nMHB4JyB2aWV3Qm94PScwIDAgMjQgMjQnIHN0eWxlPSdlbmFibGUtYmFja2dyb3VuZDpuZXcgMCAwIDI0IDI0OycgeG1sOnNwYWNlPSdwcmVzZXJ2ZSclM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjMwMGZmNDQ7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTkuODksMTIuMTJMNy4xNywxNC45IEw2LjIzLDkuMDJsMC45NCw1Ljg4bDEuNDEtNi40MWMwLjQxLTEuOTksMS4wOC0zLjY5LDEuOTEtNC44NWMwLjgzLTEuMTYsMS43OC0xLjcyLDIuNy0xLjU5YzAuOTIsMC4xMywxLjc2LDAuOTUsMi40LDIuMzIgYzAuNjQsMS4zNywxLjA0LDMuMjMsMS4xNSw1LjI5YzAuMSwyLjA2LTAuMSw0LjIyLTAuNTcsNi4xNGMtMC40OCwxLjkyLTEuMiwzLjUxLTIuMDYsNC41MmMtMC44NiwxLjAxLTEuODIsMS4zOS0yLjcyLDEuMDkgcy0xLjcxLTEuMjgtMi4yOS0yLjc4Jy8lM2UgJTNjL3N2ZyUzZVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNS4wLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNlICUzY3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHlsZT0nZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDsnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzMDBmZjQ0O3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J00xLDR2Nmg2Jy8lM2UgJTNjcGF0aCBzdHlsZT0nZmlsbDpub25lO3N0cm9rZTolMjMwMGZmNDQ7c3Ryb2tlLXdpZHRoOjI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kOycgZD0nTTMuNTEsMTUgYzAuNjUsMS44NCwxLjg4LDMuNDIsMy41LDQuNXMzLjU2LDEuNjEsNS41LDEuNDljMS45NS0wLjExLDMuODEtMC44NSw1LjMtMi4xMWMxLjQ5LTEuMjYsMi41My0yLjk3LDIuOTYtNC44NyBjMC40My0xLjksMC4yNC0zLjg5LTAuNTYtNS42OGMtMC44LTEuNzgtMi4xNS0zLjI1LTMuODYtNC4yYy0xLjcxLTAuOTQtMy42OC0xLjMxLTUuNjEtMS4wNGMtMS45MywwLjI3LTMuNzIsMS4xNi01LjEsMi41NEwxLDEwJy8lM2UgJTNjL3N2ZyUzZVwiIiwibW9kdWxlLmV4cG9ydHMgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAyNS4wLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNlICUzY3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHlsZT0nZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAyNCAyNDsnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNlICUzY3BhdGggc3R5bGU9J2ZpbGw6bm9uZTtzdHJva2U6JTIzMDBmZjQ0O3N0cm9rZS13aWR0aDoyO3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDsnIGQ9J00yMyw0djZoLTYnLyUzZSAlM2NwYXRoIHN0eWxlPSdmaWxsOm5vbmU7c3Ryb2tlOiUyMzAwZmY0NDtzdHJva2Utd2lkdGg6MjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7JyBkPSdNMjAuNDksMTUgYy0wLjY1LDEuODQtMS44OCwzLjQyLTMuNTEsNC41Yy0xLjYzLDEuMDgtMy41NiwxLjYtNS41MSwxLjQ5Yy0xLjk1LTAuMTEtMy44MS0wLjg2LTUuMjktMi4xMmMtMS40OS0xLjI2LTIuNTMtMi45Ny0yLjk2LTQuODggYy0wLjQzLTEuOS0wLjIzLTMuODksMC41Ny01LjY4YzAuOC0xLjc4LDIuMTYtMy4yNSwzLjg2LTQuMTljMS43MS0wLjk0LDMuNjgtMS4zLDUuNjEtMS4wM2MxLjkzLDAuMjcsMy43MiwxLjE3LDUuMSwyLjU1TDIzLDEwJy8lM2UgJTNjL3N2ZyUzZVwiIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxuXG52YXIgRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudCh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEV2ZW50O1xyXG59KCkpO1xyXG52YXIgRXJyb3JFdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhFcnJvckV2ZW50LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRXJyb3JFdmVudChlcnJvciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ2Vycm9yJywgdGFyZ2V0KSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xyXG4gICAgICAgIF90aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVycm9yRXZlbnQ7XHJcbn0oRXZlbnQpKTtcclxudmFyIENsb3NlRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoQ2xvc2VFdmVudCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIENsb3NlRXZlbnQoY29kZSwgcmVhc29uLCB0YXJnZXQpIHtcclxuICAgICAgICBpZiAoY29kZSA9PT0gdm9pZCAwKSB7IGNvZGUgPSAxMDAwOyB9XHJcbiAgICAgICAgaWYgKHJlYXNvbiA9PT0gdm9pZCAwKSB7IHJlYXNvbiA9ICcnOyB9XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ2Nsb3NlJywgdGFyZ2V0KSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLndhc0NsZWFuID0gdHJ1ZTtcclxuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICBfdGhpcy5yZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIENsb3NlRXZlbnQ7XHJcbn0oRXZlbnQpKTtcblxuLyohXHJcbiAqIFJlY29ubmVjdGluZyBXZWJTb2NrZXRcclxuICogYnkgUGVkcm8gTGFkYXJpYSA8cGVkcm8ubGFkYXJpYUBnbWFpbC5jb20+XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wbGFkYXJpYS9yZWNvbm5lY3Rpbmctd2Vic29ja2V0XHJcbiAqIExpY2Vuc2UgTUlUXHJcbiAqL1xyXG52YXIgZ2V0R2xvYmFsV2ViU29ja2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHJldHVybiBXZWJTb2NrZXQ7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gYXJndW1lbnQgbG9va3MgbGlrZSBhIFdlYlNvY2tldCBjbGFzc1xyXG4gKi9cclxudmFyIGlzV2ViU29ja2V0ID0gZnVuY3Rpb24gKHcpIHsgcmV0dXJuIHR5cGVvZiB3ICE9PSAndW5kZWZpbmVkJyAmJiAhIXcgJiYgdy5DTE9TSU5HID09PSAyOyB9O1xyXG52YXIgREVGQVVMVCA9IHtcclxuICAgIG1heFJlY29ubmVjdGlvbkRlbGF5OiAxMDAwMCxcclxuICAgIG1pblJlY29ubmVjdGlvbkRlbGF5OiAxMDAwICsgTWF0aC5yYW5kb20oKSAqIDQwMDAsXHJcbiAgICBtaW5VcHRpbWU6IDUwMDAsXHJcbiAgICByZWNvbm5lY3Rpb25EZWxheUdyb3dGYWN0b3I6IDEuMyxcclxuICAgIGNvbm5lY3Rpb25UaW1lb3V0OiA0MDAwLFxyXG4gICAgbWF4UmV0cmllczogSW5maW5pdHksXHJcbiAgICBtYXhFbnF1ZXVlZE1lc3NhZ2VzOiBJbmZpbml0eSxcclxuICAgIHN0YXJ0Q2xvc2VkOiBmYWxzZSxcclxuICAgIGRlYnVnOiBmYWxzZSxcclxufTtcclxudmFyIFJlY29ubmVjdGluZ1dlYlNvY2tldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwsIHByb3RvY29scywgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7XHJcbiAgICAgICAgICAgIGVycm9yOiBbXSxcclxuICAgICAgICAgICAgbWVzc2FnZTogW10sXHJcbiAgICAgICAgICAgIG9wZW46IFtdLFxyXG4gICAgICAgICAgICBjbG9zZTogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9yZXRyeUNvdW50ID0gLTE7XHJcbiAgICAgICAgdGhpcy5fc2hvdWxkUmVjb25uZWN0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jb25uZWN0TG9jayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2JpbmFyeVR5cGUgPSAnYmxvYic7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VDYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9tZXNzYWdlUXVldWUgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gQ0xPU0VEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vbmNsb3NlID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9uZXJyb3IgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ubWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uJ3MgcmVhZHlTdGF0ZSBjaGFuZ2VzIHRvIE9QRU47XHJcbiAgICAgICAgICogdGhpcyBpbmRpY2F0ZXMgdGhhdCB0aGUgY29ubmVjdGlvbiBpcyByZWFkeSB0byBzZW5kIGFuZCByZWNlaXZlIGRhdGFcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ub3BlbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlT3BlbiA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVidWcoJ29wZW4gZXZlbnQnKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuX29wdGlvbnMubWluVXB0aW1lLCBtaW5VcHRpbWUgPSBfYSA9PT0gdm9pZCAwID8gREVGQVVMVC5taW5VcHRpbWUgOiBfYTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLl9jb25uZWN0VGltZW91dCk7XHJcbiAgICAgICAgICAgIF90aGlzLl91cHRpbWVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fYWNjZXB0T3BlbigpOyB9LCBtaW5VcHRpbWUpO1xyXG4gICAgICAgICAgICBfdGhpcy5fd3MuYmluYXJ5VHlwZSA9IF90aGlzLl9iaW5hcnlUeXBlO1xyXG4gICAgICAgICAgICAvLyBzZW5kIGVucXVldWVkIG1lc3NhZ2VzIChtZXNzYWdlcyBzZW50IGJlZm9yZSB3ZWJzb2NrZXQgb3BlbiBldmVudClcclxuICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VRdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybiBfdGhpcy5fd3Muc2VuZChtZXNzYWdlKTsgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlUXVldWUgPSBbXTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm9ub3Blbikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25vcGVuKGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5fbGlzdGVuZXJzLm9wZW4uZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIF90aGlzLl9jYWxsRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpOyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZU1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2RlYnVnKCdtZXNzYWdlIGV2ZW50Jyk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vbm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9ubWVzc2FnZShldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVycy5tZXNzYWdlLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBfdGhpcy5fY2FsbEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTsgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVFcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVidWcoJ2Vycm9yIGV2ZW50JywgZXZlbnQubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kaXNjb25uZWN0KHVuZGVmaW5lZCwgZXZlbnQubWVzc2FnZSA9PT0gJ1RJTUVPVVQnID8gJ3RpbWVvdXQnIDogdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm9uZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uZXJyb3IoZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9kZWJ1ZygnZXhlYyBlcnJvciBsaXN0ZW5lcnMnKTtcclxuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVycy5lcnJvci5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gX3RoaXMuX2NhbGxFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7IH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5fY29ubmVjdCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuX2RlYnVnKCdjbG9zZSBldmVudCcpO1xyXG4gICAgICAgICAgICBfdGhpcy5fY2xlYXJUaW1lb3V0cygpO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuX3Nob3VsZFJlY29ubmVjdCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoX3RoaXMub25jbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25jbG9zZShldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVycy5jbG9zZS5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gX3RoaXMuX2NhbGxFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsO1xyXG4gICAgICAgIHRoaXMuX3Byb3RvY29scyA9IHByb3RvY29scztcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5zdGFydENsb3NlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaG91bGRSZWNvbm5lY3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29ubmVjdGluZ1dlYlNvY2tldCwgXCJDT05ORUNUSU5HXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb25uZWN0aW5nV2ViU29ja2V0LCBcIk9QRU5cIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQsIFwiQ0xPU0lOR1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29ubmVjdGluZ1dlYlNvY2tldCwgXCJDTE9TRURcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLCBcIkNPTk5FQ1RJTkdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVjb25uZWN0aW5nV2ViU29ja2V0LkNPTk5FQ1RJTkc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZSwgXCJPUEVOXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlY29ubmVjdGluZ1dlYlNvY2tldC5PUEVOO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUsIFwiQ0xPU0lOR1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuQ0xPU0lORztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLCBcIkNMT1NFRFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuQ0xPU0VEO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUsIFwiYmluYXJ5VHlwZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93cyA/IHRoaXMuX3dzLmJpbmFyeVR5cGUgOiB0aGlzLl9iaW5hcnlUeXBlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHlwZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fd3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dzLmJpbmFyeVR5cGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUsIFwicmV0cnlDb3VudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9yIGNvbm5lY3Rpb24gcmV0cmllc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fcmV0cnlDb3VudCwgMCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZSwgXCJidWZmZXJlZEFtb3VudFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBieXRlcyBvZiBkYXRhIHRoYXQgaGF2ZSBiZWVuIHF1ZXVlZCB1c2luZyBjYWxscyB0byBzZW5kKCkgYnV0IG5vdCB5ZXRcclxuICAgICAgICAgKiB0cmFuc21pdHRlZCB0byB0aGUgbmV0d29yay4gVGhpcyB2YWx1ZSByZXNldHMgdG8gemVybyBvbmNlIGFsbCBxdWV1ZWQgZGF0YSBoYXMgYmVlbiBzZW50LlxyXG4gICAgICAgICAqIFRoaXMgdmFsdWUgZG9lcyBub3QgcmVzZXQgdG8gemVybyB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZDsgaWYgeW91IGtlZXAgY2FsbGluZyBzZW5kKCksXHJcbiAgICAgICAgICogdGhpcyB3aWxsIGNvbnRpbnVlIHRvIGNsaW1iLiBSZWFkIG9ubHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJ5dGVzID0gdGhpcy5fbWVzc2FnZVF1ZXVlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjICs9IG1lc3NhZ2UubGVuZ3RoOyAvLyBub3QgYnl0ZSBzaXplXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjYyArPSBtZXNzYWdlLnNpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhY2MgKz0gbWVzc2FnZS5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBieXRlcyArICh0aGlzLl93cyA/IHRoaXMuX3dzLmJ1ZmZlcmVkQW1vdW50IDogMCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZSwgXCJleHRlbnNpb25zXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZXh0ZW5zaW9ucyBzZWxlY3RlZCBieSB0aGUgc2VydmVyLiBUaGlzIGlzIGN1cnJlbnRseSBvbmx5IHRoZSBlbXB0eSBzdHJpbmcgb3IgYSBsaXN0IG9mXHJcbiAgICAgICAgICogZXh0ZW5zaW9ucyBhcyBuZWdvdGlhdGVkIGJ5IHRoZSBjb25uZWN0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93cyA/IHRoaXMuX3dzLmV4dGVuc2lvbnMgOiAnJztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLCBcInByb3RvY29sXCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIHRoZSBzdWItcHJvdG9jb2wgdGhlIHNlcnZlciBzZWxlY3RlZDtcclxuICAgICAgICAgKiB0aGlzIHdpbGwgYmUgb25lIG9mIHRoZSBzdHJpbmdzIHNwZWNpZmllZCBpbiB0aGUgcHJvdG9jb2xzIHBhcmFtZXRlciB3aGVuIGNyZWF0aW5nIHRoZVxyXG4gICAgICAgICAqIFdlYlNvY2tldCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dzID8gdGhpcy5fd3MucHJvdG9jb2wgOiAnJztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLCBcInJlYWR5U3RhdGVcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb25uZWN0aW9uOyB0aGlzIGlzIG9uZSBvZiB0aGUgUmVhZHkgc3RhdGUgY29uc3RhbnRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dzLnJlYWR5U3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuc3RhcnRDbG9zZWRcclxuICAgICAgICAgICAgICAgID8gUmVjb25uZWN0aW5nV2ViU29ja2V0LkNMT1NFRFxyXG4gICAgICAgICAgICAgICAgOiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuQ09OTkVDVElORztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLCBcInVybFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIFVSTCBhcyByZXNvbHZlZCBieSB0aGUgY29uc3RydWN0b3JcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dzID8gdGhpcy5fd3MudXJsIDogJyc7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gb3IgY29ubmVjdGlvbiBhdHRlbXB0LCBpZiBhbnkuIElmIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHlcclxuICAgICAqIENMT1NFRCwgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nXHJcbiAgICAgKi9cclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoY29kZSwgcmVhc29uKSB7XHJcbiAgICAgICAgaWYgKGNvZGUgPT09IHZvaWQgMCkgeyBjb2RlID0gMTAwMDsgfVxyXG4gICAgICAgIHRoaXMuX2Nsb3NlQ2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9zaG91bGRSZWNvbm5lY3QgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9jbGVhclRpbWVvdXRzKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93cykge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnY2xvc2UgZW5xdWV1ZWQ6IG5vIHdzIGluc3RhbmNlJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3dzLnJlYWR5U3RhdGUgPT09IHRoaXMuQ0xPU0VEKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdjbG9zZTogYWxyZWFkeSBjbG9zZWQnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93cy5jbG9zZShjb2RlLCByZWFzb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBvciBjb25uZWN0aW9uIGF0dGVtcHQgYW5kIGNvbm5lY3RzIGFnYWluLlxyXG4gICAgICogUmVzZXRzIHJldHJ5IGNvdW50ZXI7XHJcbiAgICAgKi9cclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKGNvZGUsIHJlYXNvbikge1xyXG4gICAgICAgIHRoaXMuX3Nob3VsZFJlY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VDYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9yZXRyeUNvdW50ID0gLTE7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93cyB8fCB0aGlzLl93cy5yZWFkeVN0YXRlID09PSB0aGlzLkNMT1NFRCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNjb25uZWN0KGNvZGUsIHJlYXNvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbnF1ZXVlIHNwZWNpZmllZCBkYXRhIHRvIGJlIHRyYW5zbWl0dGVkIHRvIHRoZSBzZXJ2ZXIgb3ZlciB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5fd3MgJiYgdGhpcy5fd3MucmVhZHlTdGF0ZSA9PT0gdGhpcy5PUEVOKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCdzZW5kJywgZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dzLnNlbmQoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLl9vcHRpb25zLm1heEVucXVldWVkTWVzc2FnZXMsIG1heEVucXVldWVkTWVzc2FnZXMgPSBfYSA9PT0gdm9pZCAwID8gREVGQVVMVC5tYXhFbnF1ZXVlZE1lc3NhZ2VzIDogX2E7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZXNzYWdlUXVldWUubGVuZ3RoIDwgbWF4RW5xdWV1ZWRNZXNzYWdlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJ2VucXVldWUnLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VRdWV1ZS5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQgaGFuZGxlciBvZiBhIHNwZWNpZmljIGV2ZW50IHR5cGVcclxuICAgICAqL1xyXG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyc1t0eXBlXSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldmVudC50eXBlXTtcclxuICAgICAgICBpZiAobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsaXN0ZW5lcnNfMSA9IF9fdmFsdWVzKGxpc3RlbmVycyksIGxpc3RlbmVyc18xXzEgPSBsaXN0ZW5lcnNfMS5uZXh0KCk7ICFsaXN0ZW5lcnNfMV8xLmRvbmU7IGxpc3RlbmVyc18xXzEgPSBsaXN0ZW5lcnNfMS5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNfMV8xLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNfMV8xICYmICFsaXN0ZW5lcnNfMV8xLmRvbmUgJiYgKF9hID0gbGlzdGVuZXJzXzEucmV0dXJuKSkgX2EuY2FsbChsaXN0ZW5lcnNfMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGFuIGV2ZW50IGxpc3RlbmVyXHJcbiAgICAgKi9cclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbdHlwZV0pIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnNbdHlwZV0gPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0uZmlsdGVyKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsICE9PSBsaXN0ZW5lcjsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUuX2RlYnVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5kZWJ1Zykge1xyXG4gICAgICAgICAgICAvLyBub3QgdXNpbmcgc3ByZWFkIGJlY2F1c2UgY29tcGlsZWQgdmVyc2lvbiB1c2VzIFN5bWJvbHNcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF9fc3ByZWFkKFsnUldTPiddLCBhcmdzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUuX2dldE5leHREZWxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLl9vcHRpb25zLCBfYiA9IF9hLnJlY29ubmVjdGlvbkRlbGF5R3Jvd0ZhY3RvciwgcmVjb25uZWN0aW9uRGVsYXlHcm93RmFjdG9yID0gX2IgPT09IHZvaWQgMCA/IERFRkFVTFQucmVjb25uZWN0aW9uRGVsYXlHcm93RmFjdG9yIDogX2IsIF9jID0gX2EubWluUmVjb25uZWN0aW9uRGVsYXksIG1pblJlY29ubmVjdGlvbkRlbGF5ID0gX2MgPT09IHZvaWQgMCA/IERFRkFVTFQubWluUmVjb25uZWN0aW9uRGVsYXkgOiBfYywgX2QgPSBfYS5tYXhSZWNvbm5lY3Rpb25EZWxheSwgbWF4UmVjb25uZWN0aW9uRGVsYXkgPSBfZCA9PT0gdm9pZCAwID8gREVGQVVMVC5tYXhSZWNvbm5lY3Rpb25EZWxheSA6IF9kO1xyXG4gICAgICAgIHZhciBkZWxheSA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuX3JldHJ5Q291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIGRlbGF5ID1cclxuICAgICAgICAgICAgICAgIG1pblJlY29ubmVjdGlvbkRlbGF5ICogTWF0aC5wb3cocmVjb25uZWN0aW9uRGVsYXlHcm93RmFjdG9yLCB0aGlzLl9yZXRyeUNvdW50IC0gMSk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheSA+IG1heFJlY29ubmVjdGlvbkRlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBkZWxheSA9IG1heFJlY29ubmVjdGlvbkRlbGF5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RlYnVnKCduZXh0IGRlbGF5JywgZGVsYXkpO1xyXG4gICAgICAgIHJldHVybiBkZWxheTtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl93YWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgX3RoaXMuX2dldE5leHREZWxheSgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9nZXROZXh0VXJsID0gZnVuY3Rpb24gKHVybFByb3ZpZGVyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB1cmxQcm92aWRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cmxQcm92aWRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdXJsUHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdmFyIHVybCA9IHVybFByb3ZpZGVyKCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghIXVybC50aGVuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIFVSTCcpO1xyXG4gICAgfTtcclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5fY29ubmVjdExvY2sgfHwgIXRoaXMuX3Nob3VsZFJlY29ubmVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2Nvbm5lY3RMb2NrID0gdHJ1ZTtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLl9vcHRpb25zLCBfYiA9IF9hLm1heFJldHJpZXMsIG1heFJldHJpZXMgPSBfYiA9PT0gdm9pZCAwID8gREVGQVVMVC5tYXhSZXRyaWVzIDogX2IsIF9jID0gX2EuY29ubmVjdGlvblRpbWVvdXQsIGNvbm5lY3Rpb25UaW1lb3V0ID0gX2MgPT09IHZvaWQgMCA/IERFRkFVTFQuY29ubmVjdGlvblRpbWVvdXQgOiBfYywgX2QgPSBfYS5XZWJTb2NrZXQsIFdlYlNvY2tldCA9IF9kID09PSB2b2lkIDAgPyBnZXRHbG9iYWxXZWJTb2NrZXQoKSA6IF9kO1xyXG4gICAgICAgIGlmICh0aGlzLl9yZXRyeUNvdW50ID49IG1heFJldHJpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVidWcoJ21heCByZXRyaWVzIHJlYWNoZWQnLCB0aGlzLl9yZXRyeUNvdW50LCAnPj0nLCBtYXhSZXRyaWVzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yZXRyeUNvdW50Kys7XHJcbiAgICAgICAgdGhpcy5fZGVidWcoJ2Nvbm5lY3QnLCB0aGlzLl9yZXRyeUNvdW50KTtcclxuICAgICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgICAgICBpZiAoIWlzV2ViU29ja2V0KFdlYlNvY2tldCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ05vIHZhbGlkIFdlYlNvY2tldCBjbGFzcyBwcm92aWRlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93YWl0KClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2dldE5leHRVcmwoX3RoaXMuX3VybCk7IH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgLy8gY2xvc2UgY291bGQgYmUgY2FsbGVkIGJlZm9yZSBjcmVhdGluZyB0aGUgd3NcclxuICAgICAgICAgICAgaWYgKF90aGlzLl9jbG9zZUNhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLl9kZWJ1ZygnY29ubmVjdCcsIHsgdXJsOiB1cmwsIHByb3RvY29sczogX3RoaXMuX3Byb3RvY29scyB9KTtcclxuICAgICAgICAgICAgX3RoaXMuX3dzID0gX3RoaXMuX3Byb3RvY29sc1xyXG4gICAgICAgICAgICAgICAgPyBuZXcgV2ViU29ja2V0KHVybCwgX3RoaXMuX3Byb3RvY29scylcclxuICAgICAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmwpO1xyXG4gICAgICAgICAgICBfdGhpcy5fd3MuYmluYXJ5VHlwZSA9IF90aGlzLl9iaW5hcnlUeXBlO1xyXG4gICAgICAgICAgICBfdGhpcy5fY29ubmVjdExvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgX3RoaXMuX2FkZExpc3RlbmVycygpO1xyXG4gICAgICAgICAgICBfdGhpcy5fY29ubmVjdFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9oYW5kbGVUaW1lb3V0KCk7IH0sIGNvbm5lY3Rpb25UaW1lb3V0KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9oYW5kbGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2RlYnVnKCd0aW1lb3V0IGV2ZW50Jyk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlRXJyb3IobmV3IEVycm9yRXZlbnQoRXJyb3IoJ1RJTUVPVVQnKSwgdGhpcykpO1xyXG4gICAgfTtcclxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUuX2Rpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoY29kZSwgcmVhc29uKSB7XHJcbiAgICAgICAgaWYgKGNvZGUgPT09IHZvaWQgMCkgeyBjb2RlID0gMTAwMDsgfVxyXG4gICAgICAgIHRoaXMuX2NsZWFyVGltZW91dHMoKTtcclxuICAgICAgICBpZiAoIXRoaXMuX3dzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5fd3MuY2xvc2UoY29kZSwgcmVhc29uKTtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2xvc2UobmV3IENsb3NlRXZlbnQoY29kZSwgcmVhc29uLCB0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvLyBpZ25vcmVcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5fYWNjZXB0T3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9kZWJ1ZygnYWNjZXB0IG9wZW4nKTtcclxuICAgICAgICB0aGlzLl9yZXRyeUNvdW50ID0gMDtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9jYWxsRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAoJ2hhbmRsZUV2ZW50JyBpbiBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGxpc3RlbmVyLmhhbmRsZUV2ZW50KGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9yZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93cykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RlYnVnKCdyZW1vdmVMaXN0ZW5lcnMnKTtcclxuICAgICAgICB0aGlzLl93cy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcGVuJywgdGhpcy5faGFuZGxlT3Blbik7XHJcbiAgICAgICAgdGhpcy5fd3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xvc2UnLCB0aGlzLl9oYW5kbGVDbG9zZSk7XHJcbiAgICAgICAgdGhpcy5fd3MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX2hhbmRsZU1lc3NhZ2UpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLl93cy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX2hhbmRsZUVycm9yKTtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9hZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93cykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RlYnVnKCdhZGRMaXN0ZW5lcnMnKTtcclxuICAgICAgICB0aGlzLl93cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgdGhpcy5faGFuZGxlT3Blbik7XHJcbiAgICAgICAgdGhpcy5fd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCB0aGlzLl9oYW5kbGVDbG9zZSk7XHJcbiAgICAgICAgdGhpcy5fd3MuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX2hhbmRsZU1lc3NhZ2UpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLl93cy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX2hhbmRsZUVycm9yKTtcclxuICAgIH07XHJcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLl9jbGVhclRpbWVvdXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jb25uZWN0VGltZW91dCk7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3VwdGltZVRpbWVvdXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQ7XHJcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlY29ubmVjdGluZ1dlYlNvY2tldDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBub0Nvbm5lY3Rpb246IDEwMCxcbn0iLCJleHBvcnQgZnVuY3Rpb24gcm91bmRSZWN0KGN0eCwgeCwgeSwgdywgaCkge1xuICBsZXQgcmFkaXVzID0gODtcbiAgaWYgKHcgPCAyICogcmFkaXVzKSByYWRpdXMgPSB3IC8gMjtcbiAgaWYgKGggPCAyICogcmFkaXVzKSByYWRpdXMgPSBoIC8gMjtcblxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XG4gIGN0eC5hcmNUbyh4ICsgdywgeSwgeCArIHcsIHkgKyBoLCByYWRpdXMpO1xuICBjdHguYXJjVG8oeCArIHcsIHkgKyBoLCB4LCB5ICsgaCwgcmFkaXVzKTtcbiAgY3R4LmFyY1RvKHgsIHkgKyBoLCB4LCB5LCByYWRpdXMpO1xuICBjdHguYXJjVG8oeCwgeSwgeCArIHcsIHksIHJhZGl1cyk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcblxuICByZXR1cm4gY3R4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmFjZVJlY3QoY3R4LCB4LCB5LCB3LCBoKSB7XG4gIGNvbnN0IHJhZGl1cyA9IDU7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmxpbmVXaWR0aCA9ICczJztcbiAgY3R4LnN0cm9rZVN0eWxlID0gJyM1MmZmODBCMyc7XG4gIGN0eC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XG4gIGN0eC5hcmNUbyh4ICsgdywgeSwgeCArIHcsIHkgKyBoLCByYWRpdXMpO1xuICBjdHguYXJjVG8oeCArIHcsIHkgKyBoLCB4LCB5ICsgaCwgcmFkaXVzKTtcbiAgY3R4LmFyY1RvKHgsIHkgKyBoLCB4LCB5LCByYWRpdXMpO1xuICBjdHguYXJjVG8oeCwgeSwgeCArIHcsIHksIHJhZGl1cyk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgcmV0dXJuIGN0eC5zdHJva2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTcGVlZCh4MSwgeDIpIHtcbiAgLy8gdCDRgNC10LPRg9C70LjRgNGD0LXRgiBcItC/0LvQsNCy0L3QvtGB0YLRjFwiINC/0LXRgNC10LzQtdGJ0LXQvdC40Y8g0L/RgNGP0LzQvtGD0LPQvtC70YzQvdC40LrQsFxuICBjb25zdCB0ID0gMC4xMjA7XG4gIGNvbnN0IGQgPSBNYXRoLmFicyh4MSAtIHgyKTtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb3BhY2l0eUJ5Q3VycmVudFRpbWUoKSB7XG4gIHJldHVybiBNYXRoLmFicyhcbiAgICBNYXRoLnNpbihcbiAgICAgICgoTWF0aC5mbG9vcigobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMCkgJSAzNjApIC0gMTgwKSAqIE1hdGguUEkpIC8gMTgwLFxuICAgICksXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUG9pbnRQb3MoeCkge1xuICByZXR1cm4geCArIE1hdGguYWJzKFxuICAgIE1hdGguc2luKFxuICAgICAgKChNYXRoLmZsb29yKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDYpICUgMzYwKSAtIDE4MCkgKiBNYXRoLlBJKSAvIDE4MCxcbiAgICApICogMTUsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlUG9pbnROZWcoeCkge1xuICByZXR1cm4geCArIE1hdGguYWJzKFxuICAgIE1hdGguY29zKFxuICAgICAgKChNYXRoLmZsb29yKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDYpICUgMzYwKSAtIDE4MCkgKiBNYXRoLlBJKSAvIDE4MCxcbiAgICApICogMTUsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBibGluaygpIHtcbiAgY29uc3QgdGhyZXNoaG9sZCA9IDAuNTtcbiAgY29uc3QgeCA9IE1hdGguYWJzKFxuICAgIE1hdGguc2luKFxuICAgICAgKChNYXRoLmZsb29yKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDIpICUgMzYwKSAtIDE4MCkgKiBNYXRoLlBJKSAvIDE4MCxcbiAgICApLFxuICApO1xuICByZXR1cm4geCA+IHRocmVzaGhvbGQgPyB4IDogdGhyZXNoaG9sZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgdG9vQ2xvc2VUb3A6IDE0LFxuICB0b29DbG9zZVJpZ2h0OiAxNSxcbiAgdG9vQ2xvc2VCb3R0b206IDE2LFxuICB0b29DbG9zZUxlZnQ6IDE3LFxuICBoZWFkUG9zaXRpb25FcnJvcjogMTgsXG4gIGZhY2VZYXdMZWZ0OiAxOSxcbiAgZmFjZVlhd1JpZ2h0OiAyMCxcbiAgZmFjZVJvbGxlZFJpZ2h0OiAyMSxcbiAgZmFjZVJvbGxlZExlZnQ6IDIyLFxuICBmYWNlUGl0Y2hlZERvd246IDIzLFxuICBmYWNlUGl0Y2hlZFVwOiAyNCxcbn07XG4iLCJpbXBvcnQge1xuICByb3VuZFJlY3QsXG4gIGNhbGNTcGVlZCxcbiAgZmFjZVJlY3QsXG4gIG9wYWNpdHlCeUN1cnJlbnRUaW1lLFxuICBtb3ZlUG9pbnRQb3MsXG4gIG1vdmVQb2ludE5lZyxcbiAgYmxpbmssXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGVycm9ySXMgZnJvbSAnLi9lcnJvclR5cGVzJztcbmltcG9ydCB1cCBmcm9tICcuL2ltZy91cC5zdmcnO1xuaW1wb3J0IGRvd24gZnJvbSAnLi9pbWcvZG93bi5zdmcnO1xuaW1wb3J0IGxlZnQgZnJvbSAnLi9pbWcvbGVmdC5zdmcnO1xuaW1wb3J0IHJpZ2h0IGZyb20gJy4vaW1nL3JpZ2h0LnN2Zyc7XG5pbXBvcnQgeWF3TGVmdCBmcm9tICcuL2ltZy95YXdfbGVmdC5zdmcnO1xuaW1wb3J0IHlhd1JpZ2h0IGZyb20gJy4vaW1nL3lhd19yaWdodC5zdmcnO1xuaW1wb3J0IHBpdGNoQmFjayBmcm9tICcuL2ltZy9waXRjaF9iYWNrLnN2Zyc7XG5pbXBvcnQgcGl0Y2hGcm9udCBmcm9tICcuL2ltZy9waXRjaF9mcm9udC5zdmcnO1xuaW1wb3J0IHJvdGF0aW9uTGVmdCBmcm9tICcuL2ltZy9yb3RhdGlvbl9sZWZ0LnN2Zyc7XG5pbXBvcnQgcm90YXRpb25SaWdodCBmcm9tICcuL2ltZy9yb3RhdGlvbl9yaWdodC5zdmcnO1xuXG5jb25zdCBTVUNDRVNTX01FU1NBR0UgPSAn0JLRiyDRg9GB0L/QtdGI0L3QviDQv9GA0L7RiNC70Lgg0L/RgNC+0LLQtdGA0LrRgyEnXG5jb25zdCBURVhUX1BBRERJTkcgPSAxMDtcbmNvbnN0IFRFWFRfT0ZGU0VUID0gMTA7XG5jb25zdCBURVhUX0ZPTlQgPSAnMThweCBHZW9yZ2lhJztcbmNvbnN0IFRFWFRfQkFDS0dST1VORF9TVFlMRSA9ICdyZ2JhKDEwMCwgMTAwLCAxMDAsIC41KSc7XG5jb25zdCBJQ09OX1NJWkUgPSA0NTtcbmNvbnN0IE1BUkdJTl9YID0gMTA7XG5jb25zdCBNQVJHSU5fWSA9IDYwO1xuXG5leHBvcnQgY29uc3QgRVJST1JfQ09ERVMgPSB7XG4gIDE6ICfQmNC30L7QsdGA0LDQttC10L3QuNC1INC90LXQstC+0LfQvNC+0LbQvdC+INC+0LHRgNCw0LHQvtGC0LDRgtGMJyxcbiAgMjogJ9Ch0LvQuNGI0LrQvtC8INC90LjQt9C60L7QtSDQutCw0YfQtdGB0YLQstC+INC40LfQvtCx0YDQsNC20LXQvdC40Y8nLFxuICAzOiAn0JjQt9C+0LHRgNCw0LbQtdC90LjQtSDQvdC10LTQvtGB0YLQsNGC0L7Rh9C90L4g0YfQtdGC0LrQvtC1JyxcbiAgNDogJ9CY0LfQvtCx0YDQsNC20LXQvdC40LUg0LfQsNGB0LLQtdGH0LXQvdC+JyxcbiAgNTogJ9CY0LfQvtCx0YDQsNC20LXQvdC40LUg0YHQu9C40YjQutC+0Lwg0YLQtdC80L3QvtC1JyxcbiAgNjogJ9CY0LfQvtCx0YDQsNC20LXQvdC40LUg0YHQu9C40YjQutC+0Lwg0YHQstC10YLQu9C+0LUnLFxuICA3OiAn0JjQt9C+0LHRgNCw0LbQtdC90LjQtSDQuNC80LXQtdGCINCx0LvQuNC60LgnLFxuICA4OiAn0J3QtSDQvdCw0LnQtNC10L3QviDQu9C40YbQvicsXG4gIDk6ICfQmNC30L7QsdGA0LDQttC10L3QuNC1INGB0L7QtNC10YDQttC40YIg0LzQvdC+0LbQtdGB0YLQstC+INC70LjRhicsXG4gIDEwOiAn0J3QtdC00L7RgdGC0LDRgtC+0YfQvdCw0Y8g0YjQuNGA0LjQvdCwINC60LDQtNGA0LAnLFxuICAxMTogJ9Cd0LXQtNC+0YHRgtCw0YLQvtGH0L3QsNGPINCy0YvRgdC+0YLQsCDQutCw0LTRgNCwJyxcbiAgMTI6ICfQndC10LTQvtGB0YLQsNGC0L7Rh9C90LDRjyDRiNC40YDQuNC90LAg0LvQuNGG0LAnLFxuICAxMzogJ9Cd0LXQtNC+0YHRgtCw0YLQvtGH0L3QsNGPINCy0YvRgdC+0YLQsCDQu9C40YbQsCcsXG4gIDE0OiAn0JLQsNGI0LUg0LvQuNGG0L4g0YHQu9C40YjQutC+0Lwg0LHQu9C40LfQutC+INC6INCy0LXRgNGF0L3QtdC80YMg0LrRgNCw0Y4g0LrQsNC00YDQsCcsXG4gIDE1OiAn0JLQsNGI0LUg0LvQuNGG0L4g0YHQu9C40YjQutC+0Lwg0LHQu9C40LfQutC+INC6INC/0YDQsNCy0L7QvNGDINC60YDQsNGOINC60LDQtNGA0LAnLFxuICAxNjogJ9CS0LDRiNC1INC70LjRhtC+INGB0LvQuNGI0LrQvtC8INCx0LvQuNC30LrQviDQuiDQvdC40LbQvdC10LzRgyDQutGA0LDRjiDQutCw0LTRgNCwJyxcbiAgMTc6ICfQktCw0YjQtSDQu9C40YbQviDRgdC70LjRiNC60L7QvCDQsdC70LjQt9C60L4g0Log0LvQtdCy0L7QvNGDINC60YDQsNGOINC60LDQtNGA0LAnLFxuICAxODogJ9Ce0YjQuNCx0LrQsCDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC/0L7Qu9C+0LbQtdC90LjRjyDQs9C+0LvQvtCy0YsnLFxuICAxOTogJ9Cf0L7QstC10YDQvdC40YLQtSDQstCw0YjQtSDQu9C40YbQviDQstC/0YDQsNCy0L4nLFxuICAyMDogJ9Cf0L7QstC10YDQvdC40YLQtSDQstCw0YjQtSDQu9C40YbQviDQstC70LXQstC+JyxcbiAgMjE6ICfQktCw0YjQsCDQs9C+0LvQvtCy0LAg0YHQu9C40YjQutC+0Lwg0L3QsNC60LvQvtC90LXQvdCwINCy0L/RgNCw0LLQvicsXG4gIDIyOiAn0JLQsNGI0LAg0LPQvtC70L7QstCwINGB0LvQuNGI0LrQvtC8INC90LDQutC70L7QvdC10L3QsCDQstC70LXQstC+JyxcbiAgMjM6ICfQn9C+0LTQvdC40LzQuNGC0LUg0L/QvtC00LHQvtGA0L7QtNC+0LonLFxuICAyNDogJ9Ce0L/Rg9GB0YLQuNGC0LUg0L/QvtC00LHQvtGA0L7QtNC+0LonLFxuICAyNTogJ9Ce0YjQuNCx0LrQsCDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC/0LXRgNC10LrRgNGL0YLQuNGPINC70LjRhtCwICjRgNGC0LApJyxcbiAgMjY6ICfQktCw0YjQtSDQu9C40YbQviDQv9C10YDQtdC60YDRi9GC0L4g0LTRgNGD0LPQuNC8INC+0LHRitC10LrRgtC+0LwnLFxuICAyNzogJ9Ce0YjQuNCx0LrQsCDQvtC/0YDQtdC00LXQu9C10L3QuNGPINC+0YfQutC+0LInLFxuICAyODogJ9Ch0L3QuNC80LjRgtC1INC+0YfQutC4JyxcbiAgMjk6ICfQntGI0LjQsdC60LAg0L/RgNC+0LLQtdGA0LrQuCDQvtCx0YnQtdCz0L4g0LrQsNGH0LXRgdGC0LLQsCDQuNC30L7QsdGA0LDQttC10L3QuNGPJyxcbiAgMzA6ICfQntCx0YnQtdC1INC60LDRh9C10YHRgtCy0L4g0LjQt9C+0LHRgNCw0LbQtdC90LjRjyAoQUdTKSDQvdC40LfQutC+0LUnLFxuICAzMTogJ9Ce0YjQuNCx0LrQsCDQv9GA0L7QstC10YDQutC4IExpdmVuZXNzJyxcbiAgMzI6ICfQktCw0YjQsCDQvtGG0LXQvdC60LAgTGl2ZW5lc3Mg0YHQu9C40YjQutC+0Lwg0L3QuNC30LrQsCcsXG4gIDMzOiAn0KHQu9C40YjQutC+0Lwg0L3QuNC30LrQvtC1INC60LDRh9C10YHRgtCy0L4g0L7RhtC10L3QutC4IExpdmVuZXNzJyxcbiAgMzQ6ICfQntGI0LjQsdC60LAg0L7Qv9GA0LXQtNC10LvQtdC90LjRjyDQu9C40YbQsCDQsiDQutCw0LTRgNC1Jyxcbn07XG5cbmV4cG9ydCBjb25zdCBORVRfRVJST1JfQ09ERVMgPSB7XG4gIDEwMDogJ9Ce0YLRgdGD0YLRgdGC0LLRg9C10YIg0YHQvtC10LTQuNC90LXQvdC40LUnLFxufTtcblxuZXhwb3J0IGNsYXNzIEluZm8ge1xuICBjb25zdHJ1Y3RvcihGUkFNRV9XSURUSCwgRlJBTUVfSEVJR0hUKSB7XG4gICAgdGhpcy5GUkFNRV9XSURUSCA9IEZSQU1FX1dJRFRIO1xuICAgIHRoaXMuRlJBTUVfSEVJR0hUID0gRlJBTUVfSEVJR0hUO1xuICAgIHRoaXMuaW1nUGF0aHMgPSB7XG4gICAgICB1cCxcbiAgICAgIGRvd24sXG4gICAgICBsZWZ0LFxuICAgICAgcmlnaHQsXG4gICAgICB5YXdMZWZ0LFxuICAgICAgeWF3UmlnaHQsXG4gICAgICBwaXRjaEJhY2ssXG4gICAgICBwaXRjaEZyb250LFxuICAgICAgcm90YXRpb25MZWZ0LFxuICAgICAgcm90YXRpb25SaWdodCxcbiAgICB9O1xuICAgIHRoaXMuaW1hZ2VzID0ge307XG4gIH1cblxuICBpbml0KERPTV9QUkVGSVgsIHdyYXBwZXIpIHtcbiAgICB0aGlzLmRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIHRoaXMuY2FudmFzSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuY2FudmFzSW5mby5pZCA9IGAke0RPTV9QUkVGSVh9LWNhbnZhc0luZm9gO1xuICAgIHRoaXMuY2FudmFzSW5mby5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgdGhpcy5jYW52YXNJbmZvLnN0eWxlLnRvcCA9IDA7XG4gICAgdGhpcy5jYW52YXNJbmZvLnN0eWxlLmxlZnQgPSAwO1xuICAgIHRoaXMuY2FudmFzSW5mby53aWR0aCA9IHRoaXMuRlJBTUVfV0lEVEggKiB0aGlzLmRwcjtcbiAgICB0aGlzLmNhbnZhc0luZm8uaGVpZ2h0ID0gdGhpcy5GUkFNRV9IRUlHSFQgKiB0aGlzLmRwcjtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuY2FudmFzSW5mbyk7XG4gICAgdGhpcy5jYW52YXNJbmZvLnN0eWxlLndpZHRoID0gYCR7dGhpcy5GUkFNRV9XSURUSH1weGA7XG4gICAgdGhpcy5jYW52YXNJbmZvLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuRlJBTUVfSEVJR0hUfXB4YDtcbiAgICB0aGlzLmN0eEluZm8gPSB0aGlzLmNhbnZhc0luZm8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmN0eEluZm8uc2NhbGUodGhpcy5kcHIsIHRoaXMuZHByKTtcbiAgICAvLyDQutC+0L7RgNC00LjQvdCw0YLRiyDQu9C40YbQsCAoeCwgeSwgdywgaCkg0Lgg0L/QtdGA0LXRgdGH0LjRgtGL0LLQsNGO0YnQuNC10YHRjyDQutC+0L7RgNC00LjQvdCw0YLRi1xuICAgIC8vINC/0YDRj9C80L7Rg9Cz0L7Qu9GM0L3QuNC60LAg0LLQviDQstGA0LXQvNGPINC00LLQuNC20LXQvdC40Y8gKG5YLCBuWSwgblcsIG5IKVxuICAgIC8vIHNYICYmIHNZINGN0YLQviDQvNC90L7QttC40YLQtdC70YwgXCLRgdC60L7RgNC+0YHRgtC4XCIg0L/QtdGA0LXQtNCy0LjQttC10L3QuNGPLCDRgNCw0YHRgdGH0LjRgtGL0LLQsNC10YLRgdGPINC40YHRhdC+0LTRj1xuICAgIC8vINC40Lcg0YDQsNC30L3QvtGB0YLQuCDRgtC10LrRg9GJ0LXQuSDQpSDQuCDQvdC+0LLQvtC5INC/0L7Qt9C40YbQuNC4INClINC/0YDQuNGI0LXQtNGI0LXQuSDRgSDQsdGN0LrQsFxuICAgIHRoaXMuZmFjZUJCID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3OiAwLFxuICAgICAgaDogMCxcbiAgICAgIG5YOiB0aGlzLkZSQU1FX1dJRFRIIC8gMiAtIDkwLFxuICAgICAgblk6IHRoaXMuRlJBTUVfSEVJR0hUIC8gMiAtIDEyNSxcbiAgICAgIG5XOiAxODAsXG4gICAgICBuSDogMjUwLFxuICAgICAgc1g6IDEsXG4gICAgICBzWTogMSxcbiAgICB9O1xuICAgIHRoaXMuX2xvYWRJbWFnZXMoKTtcbiAgfVxuXG4gIF9sb2FkSW1hZ2VzKCkge1xuICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuaW1nUGF0aHMpLmZvckVhY2goKFtrLCB2XSkgPT4ge1xuICAgICAgbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHJlcyhpbWcpKTtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycikgPT4gcmVqKGVycikpO1xuICAgICAgICBpbWcuc3JjID0gdjtcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKChpbWcpID0+IHtcbiAgICAgICAgICB0aGlzLmltYWdlc1trXSA9IGltZztcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJJbmZvKGlzV1NDb25uZWN0ZWQsIGVycm9ycyA9IG51bGwsIGZhY2VSZWN0UG9zID0gbnVsbCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmVxSWQpO1xuXG4gICAgdGhpcy5jdHhJbmZvLmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhc0luZm8ud2lkdGgsIHRoaXMuY2FudmFzSW5mby5oZWlnaHQpO1xuICAgIHRoaXMuX3JlbmRlckNvbm5lY3Rpb25TdGF0dXMoaXNXU0Nvbm5lY3RlZCk7XG4gICAgLy8g0LLRi9C30L7QsiByZW5kZXJUZXh0INCx0LXQtyDQv9C10YDQtdC00LDRh9C4INC+0YjQuNCx0L7QuiDQstGL0LLQvtC00LjRgiBTVUNDRVNTX01FU1NBR0VcbiAgICBpZiAoZXJyb3JzKSB7XG4gICAgICB0aGlzLl9yZW5kZXJUZXh0KGVycm9yc1swXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlclRleHQoKTtcbiAgICB9XG4gICAgaWYgKGZhY2VSZWN0UG9zKSB0aGlzLl9yZW5kZXJGYWNlUmVjdChmYWNlUmVjdFBvcywgZXJyb3JzICYmIGVycm9ycyk7XG4gICAgICB0aGlzLnJlcUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMucmVuZGVySW5mbyhpc1dTQ29ubmVjdGVkLCBlcnJvcnMsIGZhY2VSZWN0UG9zKSk7XG4gIH1cblxuICBfcmVuZGVyVGV4dChlcnJvckNvZGUgPSBudWxsKSB7XG4gICAgY29uc3QgaW5jb3JyZWN0RmFjZVBvcyA9IFsxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjRdO1xuICAgIC8vINGC0LXQutGB0YLQvtCy0YvQtSDRg9Cy0LXQtNC+0LzQu9C10L3QuNGPINCy0YvQstC+0LTRj9GC0YHRjyDRgtC+0LvRjNC60L4g0LTQu9GPINC+0YjQuNCx0L7QuiDQv9C+INC60LDRh9C10YHRgtCy0YMg0LjQt9C+0LHRgNCw0LbQtdC90LjRj1xuICAgIGlmIChpbmNvcnJlY3RGYWNlUG9zLnNvbWUoKG51bSkgPT4gZXJyb3JDb2RlID09PSBudW0pKSByZXR1cm47XG4gICAgdGhpcy5jdHhJbmZvLmZvbnQgPSBURVhUX0ZPTlQ7XG4gICAgdGhpcy5jdHhJbmZvLmZpbGxTdHlsZSA9IFRFWFRfQkFDS0dST1VORF9TVFlMRTtcbiAgICBjb25zdCB0ZXh0TWV0cmljcyA9IHRoaXMuY3R4SW5mby5tZWFzdXJlVGV4dChcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgIWVycm9yQ29kZVxuICAgICAgICA/IFNVQ0NFU1NfTUVTU0FHRVxuICAgICAgICA6IGVycm9yQ29kZSA+PSAxMDBcbiAgICAgICAgICA/IE5FVF9FUlJPUl9DT0RFU1tlcnJvckNvZGVdIDogRVJST1JfQ09ERVNbZXJyb3JDb2RlXSxcbiAgICApO1xuICAgIGNvbnN0IHRleHRXaWR0aCA9IHRleHRNZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdCArIHRleHRNZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgY29uc3QgdGV4dEhlaWdodCA9IHRleHRNZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50XG4gICAgICArIHRleHRNZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcblxuICAgIHJvdW5kUmVjdChcbiAgICAgIC8vINCa0YPQtNCwINCy0YvQstC+0LTQuNC8XG4gICAgICB0aGlzLmN0eEluZm8sXG4gICAgICAvLyDQmtC+0L7RgNC00LjQvdCw0YLQsCB4LCDQstGL0LLQvtC00LjQvCDQv9C+INGG0LXQvdGC0YDRgyDQutCw0LTRgNCwXG4gICAgICB0aGlzLkZSQU1FX1dJRFRIIC8gMiAtIHRleHRXaWR0aCAvIDIgLSBURVhUX1BBRERJTkcsXG4gICAgICAvLyDQmtC+0L7RgNC00LjQvdCw0YLQsCB5LCDQstGL0LLQvtC00LjQvCDRgSDQvtGC0YHRgtGD0L/QvtC8INGB0LLQtdGA0YXRg1xuICAgICAgVEVYVF9PRkZTRVQsXG4gICAgICAvLyDQqNC40YDQuNC90LAsINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPQtdGCINGI0LjRgNC40L3QtSDRgtC10LrRgdGC0LAgKyDQv9C+0LvRj1xuICAgICAgdGV4dFdpZHRoICsgVEVYVF9QQURESU5HICogMixcbiAgICAgIC8vINCS0YvRgdC+0YLQsCwg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0YjQuNGA0LjQvdC1INGC0LXQutGB0YLQsCArINC/0L7Qu9GPXG4gICAgICB0ZXh0SGVpZ2h0ICsgVEVYVF9QQURESU5HICogMixcbiAgICApLmZpbGwoKTtcblxuICAgIC8vINCU0LXQu9Cw0LXQvCDRhtC10L3RgtGA0LjRgNC+0LLQsNC90LjQtSDQv9C+INGB0LXRgNC10LTQuNC90LUsINGH0YLQvtCx0Ysg0L/QvtGC0L7QvCDQvdC1INGA0LDRgdGB0YfQuNGC0YvQstCw0YLRjCDRgdC80LXRidC10L3QuNGPXG4gICAgdGhpcy5jdHhJbmZvLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIHRoaXMuY3R4SW5mby5maWxsU3R5bGUgPSBlcnJvckNvZGUgPyAnd2hpdGUnIDogJyMwMEZGMDAnO1xuICAgIHRoaXMuY3R4SW5mby5maWxsVGV4dChcbiAgICAgIC8vINCS0YvQstC+0LTQuNC80YvQuSDRgtC10LrRgdGCXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICFlcnJvckNvZGVcbiAgICAgICAgPyBTVUNDRVNTX01FU1NBR0VcbiAgICAgICAgOiBlcnJvckNvZGUgPj0gMTAwXG4gICAgICAgICAgPyBORVRfRVJST1JfQ09ERVNbZXJyb3JDb2RlXSA6IEVSUk9SX0NPREVTW2Vycm9yQ29kZV0sXG4gICAgICAvLyDQmtC+0L7RgNC00LjQvdCw0YLQsCB4XG4gICAgICB0aGlzLkZSQU1FX1dJRFRIIC8gMixcbiAgICAgIC8vINCa0L7QvtGA0LTQuNC90LDRgtCwIHksINCy0YvQstC+0LTQuNC8INC/0L4g0YbQtdC90YLRgNGDINC/0L7QtNC70L7QttC60LhcbiAgICAgIFRFWFRfUEFERElORyArIFRFWFRfT0ZGU0VUICsgdGV4dE1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQsXG4gICAgKTtcbiAgfVxuXG4gIF9yZW5kZXJGYWNlUmVjdChmYWNlUmVjdFBvcyA9IG51bGwsIGVycm9ycyA9IG51bGwpIHtcbiAgICBpZiAoZmFjZVJlY3RQb3MpIHtcbiAgICAgIC8vINC90L7QstGL0LUg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0YEg0LHRjdC60LBcbiAgICAgIHRoaXMuZmFjZUJCLnggPSBNYXRoLmZsb29yKGZhY2VSZWN0UG9zLngpO1xuICAgICAgdGhpcy5mYWNlQkIueSA9IE1hdGguZmxvb3IoZmFjZVJlY3RQb3MueSk7XG4gICAgICB0aGlzLmZhY2VCQi53ID0gTWF0aC5mbG9vcihmYWNlUmVjdFBvcy53aWR0aCk7XG4gICAgICB0aGlzLmZhY2VCQi5oID0gTWF0aC5mbG9vcihmYWNlUmVjdFBvcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIC8vIHNYICYmIHNZINGN0YLQviDQt9C90LDRh9C10L3QuNGPINC60L7RgtC+0YDRi9C1INC00L7QsdCw0LLQu9GP0Y7RgtGB0Y8g0L/RgNC4INC60LDQttC00L7QvCDRiNCw0LPQtSDQsNC90LjQvNCw0YbQuNC4INC00LLQuNC20LXQvdC40Y8g0L/RgNGP0LzQvtGD0LPQvtC70YzQvdC40LrQsFxuICAgIC8vINC+0L3QuCDRj9Cy0LvRj9GO0YLRgdGPINC30L3QsNGH0LXQvdC40LXQvCBcItGB0LrQvtGA0L7RgdGC0LhcIiDQv9C10YDQtdC80LXRidC10L3QuNGPINC/0L4g0L7RgdC4IFggJiBZXG4gICAgdGhpcy5mYWNlQkIuc1ggPSBjYWxjU3BlZWQodGhpcy5mYWNlQkIueCwgdGhpcy5mYWNlQkIublgpO1xuICAgIHRoaXMuZmFjZUJCLnNZID0gY2FsY1NwZWVkKHRoaXMuZmFjZUJCLnksIHRoaXMuZmFjZUJCLm5ZKTtcblxuICAgIC8vINGB0YDQsNCy0L3QuNCy0LDQtdGCINC30L3QsNGH0LXQvdC40LUg0YEg0LHRjdC60LAgdGhpcy5mYWNlQkIueCDRgSDRgtC10LrRg9GJ0LXQuSDQutC+0L7RgNC00LjQvdCw0YLQvtC5XG4gICAgLy8g0L/RgNGP0LzQvtGD0LPQvtC70YzQvdC40LrQsCB0aGlzLmZhY2VCQi5uWCAoblggPSBuZXcgWCkg0Lgg0LXRgdC70Lgg0L7QvdCwINCx0L7Qu9GM0YjQtSwg0YLQviDQtNC+0LHQsNCy0LvRj9C10YIg0L/QtdGA0LXQvNC10L3QvdGD0Y5cbiAgICAvLyDRiNCw0LPQsCB0aGlzLmZhY2VCQi5zWCwg0LzQtdC90YzRiNC1IC0g0LLRi9GH0LjRgtCw0LXRgiDQuNC70Lgg0LXRgdC70Lgg0L7QvdC4INGA0LDQstC90YsgLSDQvdC1INC00LXQu9Cw0LXRgiDQvdC40YfQtdCz0L4uXG4gICAgLy8gdGhpcy5mYWNlQkIuc1ggLSDQv9C10YDQtdC80LXQvdC90LDRjyBcItGB0LrQvtGA0L7RgdGC0LhcIiDQv9C+INC+0YHQuCDQpSwg0LXQtSDQt9C90LDRh9C10L3QuNC1INGA0LDRgdGB0YfQuNGC0YvQstCw0LXRgtGB0Y8g0L3QsCDQvtGB0L3QvtCy0LDQvdC40LhcbiAgICAvLyDRgNCw0LfQvdC40YbRiyB4ICYgblguXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgdGhpcy5mYWNlQkIublggPSB0aGlzLmZhY2VCQi54ID4gdGhpcy5mYWNlQkIublhcbiAgICAgID8gdGhpcy5mYWNlQkIublggKyB0aGlzLmZhY2VCQi5zWFxuICAgICAgOiB0aGlzLmZhY2VCQi54IDwgdGhpcy5mYWNlQkIublhcbiAgICAgICAgPyB0aGlzLmZhY2VCQi5uWCAtIHRoaXMuZmFjZUJCLnNYXG4gICAgICAgIDogdGhpcy5mYWNlQkIueDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICB0aGlzLmZhY2VCQi5uWSA9IHRoaXMuZmFjZUJCLnkgPiB0aGlzLmZhY2VCQi5uWVxuICAgICAgPyB0aGlzLmZhY2VCQi5uWSArIHRoaXMuZmFjZUJCLnNZXG4gICAgICA6IHRoaXMuZmFjZUJCLnkgPCB0aGlzLmZhY2VCQi5uWVxuICAgICAgICA/IHRoaXMuZmFjZUJCLm5ZIC0gdGhpcy5mYWNlQkIuc1lcbiAgICAgICAgOiB0aGlzLmZhY2VCQi55O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgIHRoaXMuZmFjZUJCLm5XID0gdGhpcy5mYWNlQkIudyA+IHRoaXMuZmFjZUJCLm5XXG4gICAgICA/IHRoaXMuZmFjZUJCLm5XICsgMVxuICAgICAgOiB0aGlzLmZhY2VCQi53IDwgdGhpcy5mYWNlQkIubldcbiAgICAgICAgPyB0aGlzLmZhY2VCQi5uVyAtIDFcbiAgICAgICAgOiB0aGlzLmZhY2VCQi53O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgIHRoaXMuZmFjZUJCLm5IID0gdGhpcy5mYWNlQkIuaCA+IHRoaXMuZmFjZUJCLm5IXG4gICAgICA/IHRoaXMuZmFjZUJCLm5IICsgMVxuICAgICAgOiB0aGlzLmZhY2VCQi5oIDwgdGhpcy5mYWNlQkIubkhcbiAgICAgICAgPyB0aGlzLmZhY2VCQi5uSCAtIDFcbiAgICAgICAgOiB0aGlzLmZhY2VCQi5oO1xuXG4gICAgZmFjZVJlY3QodGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgLy8g0L/RgNC+0LLQtdGA0Y/QtdC8INC90LAg0L3QsNC70LjRh9C40LUg0L7RiNC40LHQvtC6INGB0LLRj9C30LDQvdC90YvRhSDRgSDQv9C+0LvQvtC20LXQvdC40LXQvCDQu9C40YbQsFxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMudG9vQ2xvc2VUb3ApKSB7XG4gICAgICB0aGlzLl9hcnJvd0Rvd24odGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMudG9vQ2xvc2VSaWdodCkpIHtcbiAgICAgIHRoaXMuX2Fycm93TGVmdCh0aGlzLmN0eEluZm8sIHRoaXMuZmFjZUJCLm5YLCB0aGlzLmZhY2VCQi5uWSwgdGhpcy5mYWNlQkIublcsIHRoaXMuZmFjZUJCLm5IKTtcbiAgICB9XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy50b29DbG9zZUJvdHRvbSkpIHtcbiAgICAgIHRoaXMuX2Fycm93VXAodGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMudG9vQ2xvc2VMZWZ0KSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgIHRoaXMuX2Fycm93UmlnaHQodGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy5mYWNlWWF3TGVmdCkgJiYgIWVycm9ycy5pbmNsdWRlcyhlcnJvcklzLnRvb0Nsb3NlQm90dG9tKSkge1xuICAgICAgdGhpcy5feWF3UmlnaHQodGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy5mYWNlWWF3UmlnaHQpICYmICFlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy50b29DbG9zZUJvdHRvbSkpIHtcbiAgICAgIHRoaXMuX3lhd0xlZnQodGhpcy5jdHhJbmZvLCB0aGlzLmZhY2VCQi5uWCwgdGhpcy5mYWNlQkIublksIHRoaXMuZmFjZUJCLm5XLCB0aGlzLmZhY2VCQi5uSCk7XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMuZmFjZVJvbGxlZFJpZ2h0KVxuICAgICAgICAmJiAhZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMudG9vQ2xvc2VCb3R0b20pXG4gICAgICAgICYmICFlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy5mYWNlUGl0Y2hlZERvd24pKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgICAgdGhpcy5fcm90YXRlTGVmdCh0aGlzLmN0eEluZm8sIHRoaXMuZmFjZUJCLm5YLCB0aGlzLmZhY2VCQi5uWSwgdGhpcy5mYWNlQkIublcsIHRoaXMuZmFjZUJCLm5IKTtcbiAgICB9XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaW5jbHVkZXMoZXJyb3JJcy5mYWNlUm9sbGVkTGVmdClcbiAgICAgICAgJiYgIWVycm9ycy5pbmNsdWRlcyhlcnJvcklzLnRvb0Nsb3NlQm90dG9tKVxuICAgICAgICAmJiAhZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMuZmFjZVBpdGNoZWREb3duKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgIHRoaXMuX3JvdGF0ZVJpZ2h0KHRoaXMuY3R4SW5mbywgdGhpcy5mYWNlQkIublgsIHRoaXMuZmFjZUJCLm5ZLCB0aGlzLmZhY2VCQi5uVywgdGhpcy5mYWNlQkIubkgpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMuZmFjZVBpdGNoZWREb3duKSAmJiAhZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMudG9vQ2xvc2VMZWZ0KSkge1xuICAgICAgdGhpcy5fcGl0Y2hCYWNrKHRoaXMuY3R4SW5mbywgdGhpcy5mYWNlQkIublgsIHRoaXMuZmFjZUJCLm5ZLCB0aGlzLmZhY2VCQi5uVywgdGhpcy5mYWNlQkIubkgpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmluY2x1ZGVzKGVycm9ySXMuZmFjZVBpdGNoZWRVcCkgJiYgIWVycm9ycy5pbmNsdWRlcyhlcnJvcklzLnRvb0Nsb3NlTGVmdCkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICB0aGlzLl9waXRjaEZyb250KHRoaXMuY3R4SW5mbywgdGhpcy5mYWNlQkIublgsIHRoaXMuZmFjZUJCLm5ZLCB0aGlzLmZhY2VCQi5uVywgdGhpcy5mYWNlQkIubkgpO1xuICAgIH1cbiAgfVxuXG4gIF9hcnJvd0xlZnQoY3R4LCB4LCB5LCB3LCBoKSB7XG4gICAgY29uc3QgcmVjdFlDZW50ZXIgPSB5ICsgKGggLyAyKSAtIElDT05fU0laRSAvIDI7XG4gICAgaWYgKHRoaXMuaW1hZ2VzLmxlZnQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2VzLmxlZnQsIG1vdmVQb2ludFBvcyh4IC0gTUFSR0lOX1kpLCByZWN0WUNlbnRlciwgSUNPTl9TSVpFLCBJQ09OX1NJWkUpO1xuICAgIH1cbiAgfVxuXG4gIF9hcnJvd1JpZ2h0KGN0eCwgeCwgeSwgdywgaCkge1xuICAgIGNvbnN0IHJlY3RZQ2VudGVyID0geSArIChoIC8gMikgLSBJQ09OX1NJWkUgLyAyO1xuICAgIGlmICh0aGlzLmltYWdlcy5yaWdodCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZXMucmlnaHQsIG1vdmVQb2ludE5lZyh4ICsgdyArIE1BUkdJTl9YKSwgcmVjdFlDZW50ZXIsIElDT05fU0laRSwgSUNPTl9TSVpFKTtcbiAgICB9XG4gIH1cblxuICBfYXJyb3dVcChjdHgsIHgsIHksIHcpIHtcbiAgICBjb25zdCByZWN0WENlbnRlciA9IHggKyAodyAvIDIpIC0gSUNPTl9TSVpFIC8gMjtcbiAgICBpZiAodGhpcy5pbWFnZXMudXApIHtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZXMudXAsIHJlY3RYQ2VudGVyLCBtb3ZlUG9pbnRQb3MoeSAtIE1BUkdJTl9ZKSwgSUNPTl9TSVpFLCBJQ09OX1NJWkUpO1xuICAgIH1cbiAgfVxuXG4gIF9hcnJvd0Rvd24oY3R4LCB4LCB5LCB3LCBoKSB7XG4gICAgY29uc3QgcmVjdFhDZW50ZXIgPSB4ICsgKHcgLyAyKSAtIElDT05fU0laRSAvIDI7XG4gICAgaWYgKHRoaXMuaW1hZ2VzLmRvd24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2VzLmRvd24sIHJlY3RYQ2VudGVyLCBtb3ZlUG9pbnROZWcoeSArIGggKyBNQVJHSU5fWCksIElDT05fU0laRSwgSUNPTl9TSVpFKTtcbiAgICB9XG4gIH1cblxuICBfcGl0Y2hCYWNrKGN0eCwgeCwgeSwgdywgaCkge1xuICAgIGNvbnN0IHJlY3RZQ2VudGVyID0geSArIChoIC8gMikgLSBJQ09OX1NJWkUgLyAyO1xuICAgIGlmICh0aGlzLmltYWdlcy5waXRjaEJhY2spIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSBibGluaygpO1xuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlcy5waXRjaEJhY2ssIHggKyB3ICsgTUFSR0lOX1gsIHJlY3RZQ2VudGVyLCBJQ09OX1NJWkUsIElDT05fU0laRSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9waXRjaEZyb250KGN0eCwgeCwgeSwgdywgaCkge1xuICAgIGNvbnN0IHJlY3RZQ2VudGVyID0geSArIChoIC8gMikgLSBJQ09OX1NJWkUgLyAyO1xuICAgIGlmICh0aGlzLmltYWdlcy5waXRjaEZyb250KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gYmxpbmsoKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZXMucGl0Y2hGcm9udCwgeCArIHcgKyBNQVJHSU5fWCwgcmVjdFlDZW50ZXIsIElDT05fU0laRSwgSUNPTl9TSVpFKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG5cbiAgX3JvdGF0ZUxlZnQoY3R4LCB4LCB5LCB3KSB7XG4gICAgY29uc3QgcmVjdFhDZW50ZXIgPSB4ICsgKHcgLyAyKSAtIElDT05fU0laRSAvIDI7XG4gICAgaWYgKHRoaXMuaW1hZ2VzLnJvdGF0aW9uTGVmdCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGJsaW5rKCk7XG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2VzLnJvdGF0aW9uTGVmdCwgcmVjdFhDZW50ZXIsIHkgLSBNQVJHSU5fWSwgSUNPTl9TSVpFLCBJQ09OX1NJWkUpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cblxuICBfcm90YXRlUmlnaHQoY3R4LCB4LCB5LCB3KSB7XG4gICAgY29uc3QgcmVjdFhDZW50ZXIgPSB4ICsgKHcgLyAyKSAtIElDT05fU0laRSAvIDI7XG4gICAgaWYgKHRoaXMuaW1hZ2VzLnJvdGF0aW9uUmlnaHQpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSBibGluaygpO1xuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlcy5yb3RhdGlvblJpZ2h0LCByZWN0WENlbnRlciwgeSAtIE1BUkdJTl9ZLCBJQ09OX1NJWkUsIElDT05fU0laRSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuXG4gIF95YXdMZWZ0KGN0eCwgeCwgeSwgdykge1xuICAgIGNvbnN0IHJlY3RYQ2VudGVyID0geCArICh3IC8gMikgLSBJQ09OX1NJWkUgLyAyO1xuICAgIGlmICh0aGlzLmltYWdlcy55YXdMZWZ0KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gYmxpbmsoKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZXMueWF3TGVmdCwgcmVjdFhDZW50ZXIsIHkgLSBNQVJHSU5fWSwgSUNPTl9TSVpFLCBJQ09OX1NJWkUpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cblxuICBfeWF3UmlnaHQoY3R4LCB4LCB5LCB3KSB7XG4gICAgY29uc3QgcmVjdFhDZW50ZXIgPSB4ICsgKHcgLyAyKSAtIElDT05fU0laRSAvIDI7XG4gICAgaWYgKHRoaXMuaW1hZ2VzLnlhd1JpZ2h0KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gYmxpbmsoKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZXMueWF3UmlnaHQsIHJlY3RYQ2VudGVyLCB5IC0gTUFSR0lOX1ksIElDT05fU0laRSwgSUNPTl9TSVpFKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG5cbiAgX3JlbmRlckNvbm5lY3Rpb25TdGF0dXMoaXNXU0Nvbm5lY3RlZCkge1xuICAgIHRoaXMuX29wYWNpdHkgPSBvcGFjaXR5QnlDdXJyZW50VGltZSgpO1xuICAgIGNvbnN0IGJsaW5raW5nID0gYFJHQkEoMTM1LDI0MCwwLCAke3RoaXMuX29wYWNpdHl9KWA7XG4gICAgdGhpcy5jdHhJbmZvLmJlZ2luUGF0aCgpO1xuICAgIHRoaXMuY3R4SW5mby5hcmMoMTYsIDE2LCA4LCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgIHRoaXMuY3R4SW5mby5maWxsU3R5bGUgPSBpc1dTQ29ubmVjdGVkID8gYmxpbmtpbmcgOiAncmVkJztcbiAgICB0aGlzLmN0eEluZm8uZmlsbCgpO1xuICB9XG59XG4iLCJpbXBvcnQgUmVjb25uZWN0aW5nV2Vic29ja2V0IGZyb20gJ3JlY29ubmVjdGluZy13ZWJzb2NrZXQnO1xuaW1wb3J0IG5ldEVycm9ycyBmcm9tICcuL25ldEVycm9ycyc7XG5pbXBvcnQgeyBJbmZvIH0gZnJvbSAnLi9pbmZvJztcblxuY29uc3QgUkVRVUVTVF9USU1FT1VUID0gMjAwO1xuY29uc3QgRE9NX1BSRUZJWCA9ICd2bGx1bmFwYXNzJztcbmNvbnN0IEZSQU1FX1dJRFRIID0gNjQwO1xuY29uc3QgRlJBTUVfSEVJR0hUID0gNDgwO1xuXG5jbGFzcyBMdW5hUGFzcyB7XG4gIGNvbnN0cnVjdG9yKHJvb3QsIHdzQ29ubmVjdGlvblN0cmluZywgb25SZWFkeSwgb25TdWNjZXNzKSB7XG4gICAgdGhpcy5yb290Tm9kZSA9IHJvb3Q7XG4gICAgdGhpcy52aWRlbyA9IG51bGw7XG4gICAgdGhpcy5jYW52YXNWaWRlbyA9IG51bGw7XG4gICAgdGhpcy53c0Nvbm5lY3Rpb25TdHJpbmcgPSB3c0Nvbm5lY3Rpb25TdHJpbmc7XG4gICAgdGhpcy5vblJlYWR5ID0gb25SZWFkeTtcbiAgICB0aGlzLm9uU3VjY2VzcyA9IG9uU3VjY2VzcztcbiAgICB0aGlzLmlzV1NDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzQ2FtZXJhQXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzVmlkZW9BdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy53cyA9IG51bGw7XG4gICAgdGhpcy5fdmlkZW9XaWR0aCA9IEZSQU1FX1dJRFRIO1xuICAgIHRoaXMuX3ZpZGVvSGVpZ2h0ID0gRlJBTUVfSEVJR0hUO1xuICAgIHRoaXMuaW5mbyA9IG5ldyBJbmZvKEZSQU1FX1dJRFRILCBGUkFNRV9IRUlHSFQpO1xuXG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBnZXQgaXNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0NhbWVyYUF0dGFjaGVkICYmIHRoaXMuaXNWaWRlb0F0dGFjaGVkICYmIHRoaXMuaXNXU0Nvbm5lY3RlZDtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5faW5pdERPTSgpO1xuICAgIHRoaXMuX2F0dGFjaENhbWVyYSgpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLl9hdHRhY2hWaWRlbygpKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5fY29ubmVjdFdTKCkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLm9uUmVhZHkpIHRoaXMub25SZWFkeSh0aGlzKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2luaXRET00oKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdyYXBwZXIuaWQgPSBgJHtET01fUFJFRklYfS13cmFwcGVyYDtcbiAgICB3cmFwcGVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB0aGlzLmRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIHRoaXMucm9vdE5vZGUuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG5cbiAgICB0aGlzLnZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICB0aGlzLnZpZGVvLmlkID0gYCR7RE9NX1BSRUZJWH0tdmlkZW9gO1xuICAgIHRoaXMudmlkZW8uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMudmlkZW8pO1xuXG4gICAgdGhpcy5jYW52YXNWaWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuY2FudmFzVmlkZW8uaWQgPSBgJHtET01fUFJFRklYfS1jYW52YXNWaWRlb2A7XG4gICAgdGhpcy5jYW52YXNWaWRlby53aWR0aCA9IEZSQU1FX1dJRFRIO1xuICAgIHRoaXMuY2FudmFzVmlkZW8uaGVpZ2h0ID0gRlJBTUVfSEVJR0hUO1xuICAgIHRoaXMuY2FudmFzVmlkZW8uc3R5bGUud2lkdGggPSBgJHtGUkFNRV9XSURUSH1weGA7XG4gICAgdGhpcy5jYW52YXNWaWRlby5zdHlsZS5oZWlnaHQgPSBgJHtGUkFNRV9IRUlHSFR9cHhgO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXNWaWRlbyk7XG4gICAgdGhpcy5jdHhWaWRlbyA9IHRoaXMuY2FudmFzVmlkZW8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAvLyDQo9Cx0LjRgNCw0LXQvCDRjdGE0YTQtdC60YIgXCLQt9C10YDQutCw0LvQsFwiINC4INCy0YvQstC+0LTQuNC8INCy0LjQtNC10L4g0YEg0LrQsNC80LXRgNGLINC30LXRgNC60LDQu9GM0L3QvlxuICAgIHRoaXMuY3R4VmlkZW8udHJhbnNsYXRlKHRoaXMuX3ZpZGVvV2lkdGgsIDApO1xuICAgIHRoaXMuY3R4VmlkZW8uc2NhbGUoLTEsIDEpO1xuICAgIHRoaXMuaW5mby5pbml0KERPTV9QUkVGSVgsIHdyYXBwZXIpO1xuICB9XG5cbiAgX2F0dGFjaENhbWVyYSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlc1xuICAgICAgICAuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgICB2aWRlbzoge1xuICAgICAgICAgICAgd2lkdGg6IHsgaWRlYWw6IEZSQU1FX1dJRFRIIH0sXG4gICAgICAgICAgICBoZWlnaHQ6IHsgaWRlYWw6IEZSQU1FX0hFSUdIVCB9LFxuICAgICAgICAgICAgLy8gVE9ETzog0L/RgNC+0LLQtdGA0LjRgtGMINC/0LDRgNCw0LzQtdGC0YDRiyBsZWZ0INC4IHJpZ2h0INC00LvRjyDQvNC+0LHQuNC70L7QulxuICAgICAgICAgICAgLy8gZmFjaW5nTW9kZTogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdWRpbzogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChzdHJlYW0pID0+IHtcbiAgICAgICAgICB0aGlzLnZpZGVvLnNyY09iamVjdCA9IHN0cmVhbTtcbiAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgICB0aGlzLmlzQ2FtZXJhQXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc29sdmUoc3RyZWFtKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cnJlZDogJHtlcnJ9YCk7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2F0dGFjaFZpZGVvKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy52aWRlby5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAnY2FucGxheScsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0IH0gPSB0aGlzLnZpZGVvO1xuICAgICAgICAgIHRoaXMuX3ZpZGVvV2lkdGggPSB2aWRlb1dpZHRoO1xuICAgICAgICAgIHRoaXMuX3ZpZGVvSGVpZ2h0ID0gdmlkZW9IZWlnaHQgLyAodmlkZW9XaWR0aCAvIHRoaXMuX3ZpZGVvV2lkdGgpO1xuXG4gICAgICAgICAgaWYgKE51bWJlci5pc05hTih0aGlzLl92aWRlb0hlaWdodCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvSGVpZ2h0ID0gdGhpcy5fdmlkZW9XaWR0aCAvICg0IC8gMyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvV2lkdGggPCBGUkFNRV9XSURUSFxuICAgICAgICAgICAgfHwgdGhpcy5fdmlkZW9IZWlnaHQgPCBGUkFNRV9IRUlHSFRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCfQodC70LjRiNC60L7QvCDQvNCw0LvQtdC90YzQutC+0LUg0YDQsNC30YDQtdGI0LXQvdC40LUg0LTQu9GPINC60LDQvNC10YDRiycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX3JlbmRlclZpZGVvKCk7XG5cbiAgICAgICAgICB0aGlzLmlzVmlkZW9BdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBfcmVuZGVyVmlkZW8oKSB7XG4gICAgaWYgKHRoaXMudmlkZW8ucmVhZHlTdGF0ZSA9PT0gdGhpcy52aWRlby5IQVZFX0VOT1VHSF9EQVRBKSB7XG4gICAgICAvLyDQoNCw0YHRgdGH0LjRgtGL0LLQsNC10Lwg0YHQvtC+0YLQvdC+0YjQtdC90LjQtSDQstGL0YHQvtGC0YsgXCLQv9GB0LXQstC00L7QuNGB0YXQvtC00L3QvtCz0L5cIiDQv9C+0YLQvtC60LAg0Log0LLRi9GB0L7RgtC1INC60LDQvdCy0LDRgdCwXG4gICAgICAvLyDQtNCw0L3QvdC+0LUg0YHQvtC+0YLQvdC+0YjQtdC90LjQtSDQv9C+0L3QsNC00L7QsdC40YLRgdGPINC/0YDQuCDRgdC60LXQudC70LUg0L/QvtGC0L7QutCwINC90LAg0LrQsNC90LLQsNGBXG4gICAgICBjb25zdCBoUmF0aW8gPSB0aGlzLl92aWRlb0hlaWdodCAvIHRoaXMuY2FudmFzVmlkZW8uaGVpZ2h0O1xuICAgICAgLy8g0KDQsNGB0YHRh9C40YLRi9Cy0LDQtdC8INGB0LzQtdGJ0LXQvdC40LUg0L/QviDQvtGB0LggWCDQtNC70Y8g0YbQtdC90YLRgNC40YDQvtCy0LDQvdC40Y8g0L/QvtGC0L7QutCwINC4INC60LDQvdCy0LDRgdCwLCDQv9GA0Lgg0Y3RgtC+0LxcbiAgICAgIC8vINC60YDQsNGPINGB0LvQtdCy0LAg0Lgg0YHQv9GA0LDQstCwINC+0LHRgNC10LfQsNGO0YLRgdGPLCDQtdGB0LvQuCDRhNC+0YDQvNCw0YIg0L/QvtGC0L7QutCwIDE2OjlcbiAgICAgIGNvbnN0IHhPZmZzZXQgPSAodGhpcy5jYW52YXNWaWRlby53aWR0aCAtIHRoaXMuX3ZpZGVvV2lkdGggLyBoUmF0aW8pIC8gMjtcbiAgICAgIC8vINCg0LDRgdGB0YfQuNGC0YvQstCw0LXQvCDQstGL0LLQvtC00LjQvNGD0Y4gKNC/0L7RgdC70LUg0YHQutC10LnQu9CwKSDRiNC40YDQuNC90YMg0LrQsNC00YDQsCwg0YEg0YPRh9GR0YLQvtC8INGC0L7Qs9C+LFxuICAgICAgLy8g0YHQvtC+0YLQvdC+0YjQtdC90LjQtSDRgdGC0L7RgNC+0L0g0L3QtSDQtNC+0LvQttC90L4g0LzQtdC90Y/RgtGM0YHRj1xuICAgICAgY29uc3QgZFdpZHRoID0gdGhpcy5fdmlkZW9XaWR0aCAvIGhSYXRpbztcblxuICAgICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LjRgtC+0LPQvtCy0L7QtSDQuNC30L7QsdGA0LDQttC10L3QuNC1INC90LAg0LrQsNC90LLQsNGBXG4gICAgICB0aGlzLmN0eFZpZGVvLmRyYXdJbWFnZShcbiAgICAgICAgLy8g0JjRgdGC0L7Rh9C90LjQuiDQuNC30L7QsdGA0LDQttC10L3QuNGPXG4gICAgICAgIHRoaXMudmlkZW8sXG4gICAgICAgIC8vINCa0L7QvtGA0LTQuNC90LDRgtCwIHgg0L3QsCDQutCw0L3QstCw0YHQtSwg0LrRg9C00LAg0LLRi9Cy0L7QtNC40LwsXG4gICAgICAgIC8vINC80L7QttC10YIg0LHRi9GC0Ywg0L7RgtGA0LjRhtCw0YLQtdC70YzQvdGL0Lwg0LTQu9GPINGG0LXQvdGC0YDQvtCy0LrQuFxuICAgICAgICB4T2Zmc2V0LFxuICAgICAgICAvLyDQmtC+0L7RgNC00LjQvdCw0YLQsCB5INC90LAg0LrQsNC90LLQsNGB0LUsINC60YPQtNCwINCy0YvQstC+0LTQuNC8LFxuICAgICAgICAvLyDQstC10YDRgtC40LrQsNC70YzQvdC+INCy0YvQstC+0LTQuNC80YvQtSDQv9C+0YLQvtC60Lgg0L3QtSDQsdGD0LTRg9GCINGG0LXQvdGC0YDQvtCy0LDRgtGM0YHRj1xuICAgICAgICAwLFxuICAgICAgICAvLyDQqNC40YDQuNC90LAg0LLRi9Cy0L7QtNC40LzQvtCz0L4g0LjQt9C+0LHRgNCw0LbQtdC90LjRj1xuICAgICAgICBkV2lkdGgsXG4gICAgICAgIC8vINCS0YvRgdC+0YLQsCDQstGL0LLQvtC00LjQvNC+0LPQviDQuNC30L7QsdGA0LDQttC10L3QuNGPXG4gICAgICAgIHRoaXMuY2FudmFzVmlkZW8uaGVpZ2h0LFxuICAgICAgKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuX3JlbmRlclZpZGVvKCkpO1xuICB9XG5cbiAgX2Nvbm5lY3RXUygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy53cyA9IG5ldyBSZWNvbm5lY3RpbmdXZWJzb2NrZXQodGhpcy53c0Nvbm5lY3Rpb25TdHJpbmcsIG51bGwpO1xuICAgICAgdGhpcy53cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNXU0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUodGhpcy53cyk7XG4gICAgICB9O1xuICAgICAgdGhpcy53cy5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMuaXNXU0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluZm8ucmVuZGVySW5mbyh0aGlzLmlzV1NDb25uZWN0ZWQsIFtuZXRFcnJvcnMubm9Db25uZWN0aW9uXSk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9O1xuICAgICAgdGhpcy53cy5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmlzV1NDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbmZvLnJlbmRlckluZm8odGhpcy5pc1dTQ29ubmVjdGVkKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBjaGVja0xpdmVuZXNzKCkge1xuICAgIGlmICh0aGlzLmlzUmVhZHkpIHtcbiAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdGhpcy5faGFuZGxlUmVzcG9uc2UobWVzc2FnZSk7XG4gICAgICB9O1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9zZW5kUGhvdG8oKSwgUkVRVUVTVF9USU1FT1VUKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlUmVzcG9uc2Uod3NNZXNzYWdlKSB7XG4gICAgY29uc3QgcmVzcCA9IEpTT04ucGFyc2Uod3NNZXNzYWdlLmRhdGEpO1xuXG4gICAgaWYgKCFyZXNwLmlzT2sgJiYgcmVzcC5kZXRhaWxzKSB7XG4gICAgICBjb25zdCB7IGZhY2VSZWN0IH0gPSByZXNwLmRldGFpbHMuZmFjZUZyYW1lUG9zaXRpb247XG4gICAgICBjb25zdCB7IGVycm9ycyB9ID0gcmVzcDtcbiAgICAgIHRoaXMuaW5mby5yZW5kZXJJbmZvKHRoaXMuaXNXU0Nvbm5lY3RlZCwgZXJyb3JzLCBmYWNlUmVjdCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXNwLmlzT2sgJiYgIXJlc3AuZGV0YWlscykge1xuICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IHJlc3A7XG4gICAgICB0aGlzLmluZm8ucmVuZGVySW5mbyh0aGlzLmlzV1NDb25uZWN0ZWQsIGVycm9ycyk7XG4gICAgfVxuXG4gICAgaWYgKHJlc3AuaXNPaykge1xuICAgICAgaWYgKHRoaXMub25TdWNjZXNzKSB0aGlzLm9uU3VjY2VzcyhyZXNwKTtcbiAgICAgIHRoaXMuaW5mby5yZW5kZXJJbmZvKHRoaXMuaXNXU0Nvbm5lY3RlZCk7XG4gICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fc2VuZFBob3RvKCksIFJFUVVFU1RfVElNRU9VVCk7XG4gICAgfVxuICB9XG5cbiAgX3NlbmRQaG90bygpIHtcbiAgICAvLyBUT0RPOiDQoNCw0YHRgdC80L7RgtGA0LXRgtGMINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW1hZ2VDYXB0dXJlXG4gICAgLy8g0LTQu9GPINGA0LDQsdC+0YLRiyDRgSDRhNC+0YLQvtCz0YDQsNGE0LjQtdC5INC90LDQv9GA0Y/QvNGD0Y4g0YEg0LrQsNC80LXRgNGLXG4gICAgY29uc3Qgc2hvdCA9IHRoaXMuY2FudmFzVmlkZW8udG9EYXRhVVJMKCdpbWFnZS9wbmcnKTtcbiAgICB0aGlzLndzLnNlbmQoc2hvdCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTHVuYVBhc3M7XG4iLCJpbXBvcnQgTHVuYVBhc3MgZnJvbSAnLi9sdW5hcGFzcyc7XG5cbndpbmRvdy5MdW5hUGFzcyA9IEx1bmFQYXNzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==