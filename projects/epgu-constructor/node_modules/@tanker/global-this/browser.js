'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Object$defineProperty = require('@babel/runtime-corejs3/core-js-stable/object/define-property');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _Object$defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_Object$defineProperty);

/* eslint-disable */
// Warning: don't replace this module by the core-js-pure ponyfill
//          which is too na√Øve.
//
// Note: the __global_this__ trick did not work in Safari + Karma,
//       so we continue to test global variables first :'-(
function getGlobalThis() {
  // Modern runtimes (ES2020 compatible)
  if (typeof globalThis !== 'undefined') return globalThis; // Browser main thread

  if (typeof window !== 'undefined') return window; // Browser worker

  if (typeof WorkerGlobalScope !== 'undefined') return self; // Node.js

  if (typeof global !== 'undefined') return global; // Other JS envs not in strict mode

  if (this) return this; // All other cases
  // See: https://mathiasbynens.be/notes/globalthis

  _Object$defineProperty__default['default'](Object.prototype, '__global_this__', {
    get: function get() {
      return this;
    },
    configurable: true
  });

  try {
    return __global_this__;
  } finally {
    delete Object.prototype.__global_this__;
  }
}

var globalThis$1 = getGlobalThis();

exports.default = globalThis$1;
exports.getGlobalThis = getGlobalThis;
exports.globalThis = globalThis$1;
