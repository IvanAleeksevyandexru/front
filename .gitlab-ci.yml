variables:
  CI_NAME: 'gitlab-ci'
  CI_EMAIL: 'gitlab-ci@luxoft.com'

image: node:latest

cache: &global_cache
  key: cache-${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - dist/

stages:
  - install
  - code-quality
  - library-build
  - library-publish
  - build
  - image
  - deploy

Install:
  stage: install
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  before_script:
    - rm -rf dist
  script:
    - yarn install
  only:
    - merge_requests
    - master

Lint:
  stage: code-quality
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache:
    <<: *global_cache
    policy: pull
  script:
    - yarn lint
  only:
    - merge_requests
    - master

Code-quality:
  stage: code-quality
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache:
    <<: *global_cache
    policy: pull
  script:
    - yarn test:coverage
  only:
    - merge_requests
    - master

Library-build:
  stage: library-build
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  script:
    - npm run generate-lib-version-ts
    - yarn lib:build
  only:
    - merge_requests
    - master

Library-publish:
  stage: library-publish
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache:
    <<: *global_cache
    policy: pull
  tags:
    - npm
  before_script:
    - echo "registry=http://npm.gosuslugi.local/" > ~/.npmrc
    - echo "//npm.gosuslugi.local/:_authToken=\"${NPM_TOKEN}\"" >> ~/.npmrc
  script:
    - git config --global user.email $CI_EMAIL
    - git config --global user.name $CI_NAME
    - git config receive.advertisePushOptions true
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
    - npm run release -- --release-as patch
    - git push http://${CI_USER}:${CI_ACCESS_TOKEN}@REPO_URL --follow-tags master:master
    - cd dist/epgu-constructor
    - npm publish
  only:
    - master
    - EPGUCORE-36456

Build:
  stage: build
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  script:
    - yarn build --prod
    - /devops/notify/notify.sh fronted_new_master_available
  only:
    - merge_requests
    - master

Build-image:
  stage: image
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache:
    <<: *global_cache
    policy: pull
  services:
    - name: docker:dind
      command: ['--insecure-registry', 'registry.gosuslugi.local']
  image: docker:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY
  script:
    - docker build --tag $REGISTRY/$IMAGE:$CI_COMMIT_SHA --tag $REGISTRY/$IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $REGISTRY/$IMAGE:$CI_COMMIT_SHA
    - docker push $REGISTRY/$IMAGE:$CI_COMMIT_REF_SLUG
  only:
    - merge_requests
    - master

Deploy to review env:
  stage: deploy
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache: {}
  variables:
    GIT_STRATEGY: none
  before_script:
    - export PATH=$PATH:/devops/k8s/bin
  script:
    - echo http://review-$CI_COMMIT_REF_SLUG.pgu2-dev.test.gosuslugi.ru
    - deploy
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://review-$CI_COMMIT_REF_SLUG.pgu2-dev.test.gosuslugi.ru
    on_stop: 'Drop review env'
  only:
    - merge_requests
    - master

Drop review env:
  stage: deploy
  except:
    variables:
      - $GITLAB_USER_LOGIN == $CI_NAME
  cache: {}
  variables:
    GIT_STRATEGY: none
  before_script:
    - export PATH=$PATH:/devops/k8s/bin
  script:
    - echo "Delete environment $CI_COMMIT_REF_SLUG"
    - stop
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
    - master
